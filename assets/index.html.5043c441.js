import{_ as l,r as p,o as c,c as o,a as s,b as a,d as e,e as n}from"./app.497e8b11.js";const i="/vuepress-opencv-notes/assets/2022-11-12-11-11-09.08476644.webp",r={},m=n('<h1 id="_12-使用-opencv-进行深度学习" tabindex="-1"><a class="header-anchor" href="#_12-使用-opencv-进行深度学习" aria-hidden="true">#</a> 12. 使用 OpenCV 进行深度学习</h1><p>本章我们将使用 OpenCV 的深度学习接口，并将其用于目标检测和人脸检测。</p><p>本章介绍以下主题：</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 什么是深度学习</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> OpenCV 如何与深度学习合作，以及如何实现深度学习神经网络（NN）</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> YOLO，一种非常快速的深度学习对象检测算法</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 使用 SSD 进行人脸检测</label></li></ul><h2 id="_12-1-技术要求" tabindex="-1"><a class="header-anchor" href="#_12-1-技术要求" aria-hidden="true">#</a> 12.1 技术要求</h2>',5),u={class:"task-list-container"},d=n('<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 使用编译有深度学习模块（<code>dnn</code>）的 OpenCV</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 推荐使用支持 CUDA 的 NVIDIA GPU</label></li>',2),k={class:"task-list-item"},h=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-6",checked:"checked",disabled:"disabled"},null,-1),v={class:"task-list-item-label",for:"task-item-6"},b={href:"https://github.com/PacktPublishing/Learn-OpenCV-4-By-Building-Projects-Second-Edition/tree/master/Chapter_12",target:"_blank",rel:"noopener noreferrer"},g=n('<h2 id="_12-2-深度学习简介" tabindex="-1"><a class="header-anchor" href="#_12-2-深度学习简介" aria-hidden="true">#</a> 12.2 深度学习简介</h2><div class="custom-container tip"><p class="custom-container-title">学习提示</p><p>如果需要了解，只靠本节的内容不足以了解，所以这里没有这部分笔记，建议有深度学习基础再阅读本章。</p></div><h2 id="_12-3-opencv-中的深度学习" tabindex="-1"><a class="header-anchor" href="#_12-3-opencv-中的深度学习" aria-hidden="true">#</a> 12.3 OpenCV 中的深度学习</h2><p>深度学习模块在 3.1 作为贡献模块引入，并成为 3.3 版本的一部分。但直到 3.4.3+ 和 4.x 版本才被广泛使用。</p><p>OpenCV 不支持反向传播，这意味 OpenCV 只能使用训练好的网络进行前向推理。这是因为 OpenCV 没有必要实现别人（PyTorch、TensorFlow 等）擅长的东西，OpenCV 更适合部署，因此应该专注于优化推理的计算速度。</p>',5),y=s("em",null,"TensorEditor",-1),x={href:"https://www.lobe.ai/",target:"_blank",rel:"noopener noreferrer"},w=n('<p>当我们得到一个令人满意的神经网络，我们就可以把网络的结构和参数导入到 OpenCV 中进行推理啦。</p><h2 id="_12-4-yolo-用于实时对象检测" tabindex="-1"><a class="header-anchor" href="#_12-4-yolo-用于实时对象检测" aria-hidden="true">#</a> 12.4 YOLO 用于实时对象检测</h2><p>YOLO 是目前最快的对象检测和识别算法之一，NVIDIA Titan X 上可以达到 30 fps（YOLOv3）。</p><div class="custom-container info"><p class="custom-container-title">YOLOv7 是更好的选择</p><p>当前（2022 年 11 月 11 日）YOLOv7 比以前的版本更快也更加精确，后面也将 YOLOv7 的 OpenCV 部署发布出来。</p></div><h3 id="_12-4-1-yolov3-深度学习模型架构" tabindex="-1"><a class="header-anchor" href="#_12-4-1-yolov3-深度学习模型架构" aria-hidden="true">#</a> 12.4.1 YOLOv3 深度学习模型架构</h3>',5),f=s("p",null,[a("YOLO 把整张图像划分成 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"S")]),s("annotation",{encoding:"application/x-tex"},"S \\times S")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S")])])]),a(" 大小的网络，对于每个网格，YOLO 网络模型预测 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B")]),s("annotation",{encoding:"application/x-tex"},"B")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])])]),a(" 个边界框，然后得出边界框包含可能对象的置信度。")],-1),_=s("p",null,[s("img",{src:i,alt:"",loading:"lazy"})],-1),O=s("div",{class:"custom-container info"},[s("p",{class:"custom-container-title"},"预测框"),s("p",null,"在上面的例子中，图片被分成了 49 个框，每个框预测 2 个预测框（bounding box），因此上面的图中有 98 个预测框。"),s("p",null,"可以看到这些预测框中有的边框比较粗，有的比较细，这是置信度不同的表现，置信度高的比较粗，置信度低的比较细。")],-1),S=s("p",null,[a("每个预测框有 5 个量，即中心位置（"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"x,\\,y")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])]),a("）、宽高（"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"w"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"w,\\,h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"h")])])]),a("）和置信度。")],-1),M=s("p",null,"输出结果的总数应该是：",-1),C=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"B"),s("mo",null,"×"),s("mo",{stretchy:"false"},"("),s("mn",null,"5"),s("mo",null,"+"),s("mrow",null,[s("mi",{mathvariant:"normal"},"c"),s("mi",{mathvariant:"normal"},"l"),s("mi",{mathvariant:"normal"},"a"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"e"),s("mi",{mathvariant:"normal"},"s")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," S \\times S \\times B \\times (5 + \\mathrm{classes}) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"classes")]),s("span",{class:"mclose"},")")])])])])],-1),L=s("p",null,[a("YOLO 默认使用 80 个类别 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"19"),s("mo",null,"×"),s("mn",null,"19")]),s("annotation",{encoding:"application/x-tex"},"19 \\times 19")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"19")])])]),a(" 个网格，5 个分量即预测框的 5 个量，类别数使用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"c"),s("mi",{mathvariant:"normal"},"l"),s("mi",{mathvariant:"normal"},"a"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"e"),s("mi",{mathvariant:"normal"},"s")]),s("annotation",{encoding:"application/x-tex"},"\\mathrm{classes}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"classes")])])])]),a(" 表示，即 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"c"),s("mi",{mathvariant:"normal"},"l"),s("mi",{mathvariant:"normal"},"a"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"e"),s("mi",{mathvariant:"normal"},"s")]),s("mo",null,"="),s("mn",null,"80")]),s("annotation",{encoding:"application/x-tex"},"\\mathrm{classes} = 80")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"classes")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"80")])])]),a("，这里的类别用 One-Hot 编码表示，总数为：")],-1),N=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mn",null,"19"),s("mo",null,"×"),s("mn",null,"19"),s("mo",null,"×"),s("mn",null,"5"),s("mo",null,"×"),s("mo",{stretchy:"false"},"("),s("mn",null,"5"),s("mo",null,"+"),s("mn",null,"80"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"425")]),s("annotation",{encoding:"application/x-tex"}," 19 \\times 19 \\times 5 \\times (5 + 80) = 425 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"80"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"425")])])])])],-1),V=s("p",null,"排列方式是：",-1),I=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"B"),s("mo",null,"×"),s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"x"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"y"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"w"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"h"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mrow",null,[s("mi",{mathvariant:"normal"},"c"),s("mi",{mathvariant:"normal"},"o"),s("mi",{mathvariant:"normal"},"n"),s("mi",{mathvariant:"normal"},"f")]),s("mo",{separator:"true"},","),s("mtext",null," "),s("msub",null,[s("mi",null,"c"),s("mn",null,"1")]),s("mo",{separator:"true"},","),s("mtext",null," "),s("msub",null,[s("mi",null,"c"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("mtext",null," "),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("mtext",null," "),s("msub",null,[s("mi",null,"c"),s("mn",null,"80")])])])])])]),s("mo",{fence:"true"},"]")])]),s("annotation",{encoding:"application/x-tex"}," S \\times S \\times B \\times \\begin{bmatrix} x,\\, y,\\, w,\\, h,\\, \\mathrm{conf},\\, c_1,\\, c_2,\\, \\cdots,\\, c_{80} \\end{bmatrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2em","vertical-align":"-0.35em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size1"},"[")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.85em"}},[s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm",style:{"margin-right":"0.07778em"}},"conf")]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"c"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"c"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"c"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"80")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.35em"}},[s("span")])])])])])]),s("span",{class:"mclose delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size1"},"]")])])])])])])],-1),z=n(`<p>YOLOv3 架构基于 DarkNet，DarkNet 包含 53 个网络层，YOLOv3 增加了 53 个 层，所以它有 106 层。如果需要更小更快，可以参考 TinyYOLO 或其他迷你版本。</p><h3 id="_12-4-2-yolo-数据集、词汇表和模型" tabindex="-1"><a class="header-anchor" href="#_12-4-2-yolo-数据集、词汇表和模型" aria-hidden="true">#</a> 12.4.2 YOLO 数据集、词汇表和模型</h3><p>YOLO 使用 COCO 数据集，COCO 数据集包含 80 个类别。</p><p>下载文件：</p><ul><li>模型文件：<code>https://pjreddie.com/media/files/yolov3.weights</code></li><li>网络文件：<code>https://github.com/pjreddie/darknet/blob/master/cfg/yolov3.cfg</code></li><li>词汇表：<code>https://github.com/pjreddie/darknet/blob/master/data/coco.names</code></li></ul><p>将 <code>yolov3.weights</code>、<code>yolov3.cfg</code> 和 <code>coco.names</code> 放置在本项目的根目录。</p><h3 id="_12-4-3-将-yolo-导入-opencv" tabindex="-1"><a class="header-anchor" href="#_12-4-3-将-yolo-导入-opencv" aria-hidden="true">#</a> 12.4.3 将 YOLO 导入 OpenCV</h3><p>深度学习模块需要使用命名空间 <code>cv::dnn</code>，引入 <code>&lt;opencv2/dnn.hpp&gt;</code> 。</p><p>OpenCV 的 <code>Mat</code> 图像需要转换为 DNN 张量 / Blob 格式才能输入到神经网络中，可以使用 <code>cv::dnn::blobFromImage()</code> 函数进行转换。</p><p><code>cv::dnn::blobFromImage()</code> 函数的声明如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">blobFromImage</span><span class="token punctuation">(</span>
    InputArray image<span class="token punctuation">,</span>
    OutputArray blob<span class="token punctuation">,</span>
    <span class="token keyword">double</span> scalefactor<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>
    <span class="token keyword">const</span> Size<span class="token operator">&amp;</span> size <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">const</span> Scalar<span class="token operator">&amp;</span> mean <span class="token operator">=</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">bool</span> swapRB<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token keyword">bool</span> crop<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token keyword">int</span> ddepth<span class="token operator">=</span>CV_32F
<span class="token punctuation">)</span><span class="token punctuation">;</span>

Mat <span class="token function">blobFromImage</span><span class="token punctuation">(</span>
    InputArray image<span class="token punctuation">,</span>
    <span class="token keyword">double</span> scalefactor<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>
    <span class="token keyword">const</span> Size<span class="token operator">&amp;</span> size <span class="token operator">=</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">const</span> Scalar<span class="token operator">&amp;</span> mean <span class="token operator">=</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">bool</span> swapRB<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token keyword">bool</span> crop<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token keyword">int</span> ddepth<span class="token operator">=</span>CV_32F
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其参数如下：</p><ul><li><code>image</code>：输入图像（可能是 1、3 或 4 通道）</li><li><code>blob</code>：输出 <code>Mat</code> 对象</li><li><code>scalefactor</code>：图像值乘数</li><li><code>size</code>：</li><li><code>mean</code>：</li><li><code>swapRB</code>：交换颜色通道</li><li><code>crop</code>：是否裁剪</li><li><code>ddepth</code>：</li></ul><p>我们的代码大致如下，其中的后处理和获取输出名称的函数并未进行实现，完整的实现可以参考本章的代码仓库。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/core.hpp&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/dnn.hpp&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui.hpp&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/imgproc.hpp&gt;</span></span>

<span class="token keyword">constexpr</span> <span class="token keyword">float</span> CONFIDENCE_THRESHOLD <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">float</span> NMS_THRESHOLD <span class="token operator">=</span> <span class="token number">0.4</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">int</span> INPUT_WIDTH <span class="token operator">=</span> <span class="token number">416</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">int</span> INPUT_HEIGHT <span class="token operator">=</span> <span class="token number">416</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> classes<span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> <span class="token function">getOutputsNames</span><span class="token punctuation">(</span><span class="token keyword">const</span> cv<span class="token double-colon punctuation">::</span>dnn<span class="token double-colon punctuation">::</span>Net<span class="token operator">&amp;</span> net<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">postprocess</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&amp;</span> frame<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&gt;</span><span class="token operator">&amp;</span> outs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Usage: &quot;</span> <span class="token operator">&lt;&lt;</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &lt;image&gt;&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>string classesFile <span class="token operator">=</span> <span class="token string">&quot;coco.names&quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">ifs</span><span class="token punctuation">(</span>classesFile<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string line<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>
        classes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>string modelConfiguration <span class="token operator">=</span> <span class="token string">&quot;yolov3.cfg&quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string modelWeights <span class="token operator">=</span> <span class="token string">&quot;yolov3.weights&quot;</span><span class="token punctuation">;</span>

    cv<span class="token double-colon punctuation">::</span>dnn<span class="token double-colon punctuation">::</span>Net net <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span>dnn<span class="token double-colon punctuation">::</span><span class="token function">readNetFromDarknet</span><span class="token punctuation">(</span>modelConfiguration<span class="token punctuation">,</span> modelWeights<span class="token punctuation">)</span><span class="token punctuation">;</span>
    net<span class="token punctuation">.</span><span class="token function">setPreferableBackend</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>dnn<span class="token double-colon punctuation">::</span>DNN_BACKEND_OPENCV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    net<span class="token punctuation">.</span><span class="token function">setPreferableTarget</span><span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span>dnn<span class="token double-colon punctuation">::</span>DNN_TARGET_CPU<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cv<span class="token double-colon punctuation">::</span>Mat input<span class="token punctuation">,</span> blob<span class="token punctuation">;</span>
    input <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Could not read the image: &quot;</span> <span class="token operator">&lt;&lt;</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cv<span class="token double-colon punctuation">::</span>dnn<span class="token double-colon punctuation">::</span><span class="token function">blobFromImage</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> blob<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">255.f</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span>INPUT_WIDTH<span class="token punctuation">,</span> INPUT_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span><span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    net<span class="token punctuation">.</span><span class="token function">setInput</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Mat<span class="token operator">&gt;</span> outs<span class="token punctuation">;</span>
    net<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>outs<span class="token punctuation">,</span> <span class="token function">getOutputsNames</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">postprocess</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> outs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">Profile</span></span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> layersTimes<span class="token punctuation">;</span>
    <span class="token keyword">double</span> freq <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">getTickFrequency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> t <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">getPerfProfile</span><span class="token punctuation">(</span>layersTimes<span class="token punctuation">)</span> <span class="token operator">/</span> freq<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string label <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Inference time for a frame : %.2f ms&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> label <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">&quot;object detection&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-5-使用-ssd-进行人脸检测" tabindex="-1"><a class="header-anchor" href="#_12-5-使用-ssd-进行人脸检测" aria-hidden="true">#</a> 12.5 使用 SSD 进行人脸检测</h2><p>单摄检测（Single Shot Detection，SSD）是另一种快速、准确的深度学习对象检测方法，它具有和 YOLO 类似的概念，可以在同一架构预测对象和边界框。</p><h3 id="_12-5-1-ssd-模型架构" tabindex="-1"><a class="header-anchor" href="#_12-5-1-ssd-模型架构" aria-hidden="true">#</a> 12.5.1 SSD 模型架构</h3><h3 id="_12-5-2-将-ssd-人脸检测导入-opencv" tabindex="-1"><a class="header-anchor" href="#_12-5-2-将-ssd-人脸检测导入-opencv" aria-hidden="true">#</a> 12.5.2 将 SSD 人脸检测导入 OpenCV</h3><p>本文的 SSD 模型使用 Caffe 格式，需要 OpenCV 使用 <code>cv::dnn::readNetFromCaffe()</code> 来创建网络。</p><h2 id="_12-6-总结" tabindex="-1"><a class="header-anchor" href="#_12-6-总结" aria-hidden="true">#</a> 12.6 总结</h2>`,21);function D(T,B){const t=p("ExternalLinkIcon");return c(),o("div",null,[m,s("ul",u,[d,s("li",k,[h,s("label",v,[s("a",b,[a("本章代码"),e(t)])])])]),g,s("p",null,[a("你可以从头开始创建网络，也可以使用现有的网络。有一些网站（例如 "),y,a("（已失效） 和 "),s("a",x,[a("lobe.ai"),e(t)]),a("）能够从可视化的设计器中生成代码来方便我们进行训练。")]),w,f,_,O,S,M,C,L,N,V,I,z])}const Y=l(r,[["render",D],["__file","index.html.vue"]]);export{Y as default};
