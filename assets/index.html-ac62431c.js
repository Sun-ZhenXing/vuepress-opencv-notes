import{_ as t,r as p,o as r,c as d,b as s,a as n,w as l,d as a,e as o}from"./app-e045e1fd.js";const D={},m=s("h1",{id:"_3-核心操作",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-核心操作","aria-hidden":"true"},"#"),a(" 3. 核心操作")],-1),y={class:"table-of-contents"},v=o(`<h2 id="_3-1-图片" tabindex="-1"><a class="header-anchor" href="#_3-1-图片" aria-hidden="true">#</a> 3.1 图片</h2><details class="hint-container details"><summary>学习目标</summary><ul><li>获取像素值并修改</li><li>获取图像的属性</li><li>获取图像的 ROI</li><li>图像通道的拆分及合并</li><li>图像的填充</li><li>函数 <ul><li>学习使用 NumPy 的函数库处理图像</li></ul></li></ul></details><div class="hint-container info"><p class="hint-container-title">NumPy</p><p>几乎所有这些操作与 NumPy 的关系都比与 OpenCV 的关系更加紧密，因此熟练 NumPy 可以帮助我们写出性能更好的代码。</p></div><h3 id="_3-1-1-获取并修改像素值" tabindex="-1"><a class="header-anchor" href="#_3-1-1-获取并修改像素值" aria-hidden="true">#</a> 3.1.1 获取并修改像素值</h3><p>我们注意到，一张打开的图片就是 <code>np.ndarray</code> 对象，可以使用 NumPy 对图像进行任意的操作：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">img = cv2.imread(</span><span style="color:#CE9178;">&#39;messi5.jpg&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(img[</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">img[</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span></span>
<span class="line"></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">大量修改像素操作</p><p>NumPy 是经过优化了的进行快速矩阵运算的软件包。所以我们不推荐 逐个获取像素值并修改，这样会很慢，能有矩阵运算就不要用循环。</p></div><p>更优雅的方法：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">img = cv2.imread(</span><span style="color:#CE9178;">&#39;messi5.jpg&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">img.item(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">img.itemset((</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">), </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-1-2-获取图像属性" tabindex="-1"><a class="header-anchor" href="#_3-1-2-获取图像属性" aria-hidden="true">#</a> 3.1.2 获取图像属性</h3><p>可以参考 <code>np.ndarray</code> 属性：</p><ul><li><code>img.shape</code> 形状，即一个包含行、列和通道的元组</li><li><code>img.size</code> 元素的数目，即像素乘通道的总数</li><li><code>img.dtype</code> 元素类型</li></ul><h3 id="_3-1-3-图像-roi" tabindex="-1"><a class="header-anchor" href="#_3-1-3-图像-roi" aria-hidden="true">#</a> 3.1.3 图像 ROI</h3>`,13),u=s("strong",null,"ROI",-1),h=o(`<div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">ball = img[</span><span style="color:#B5CEA8;">280</span><span style="color:#D4D4D4;">:</span><span style="color:#B5CEA8;">340</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">330</span><span style="color:#D4D4D4;">:</span><span style="color:#B5CEA8;">390</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">img[</span><span style="color:#B5CEA8;">273</span><span style="color:#D4D4D4;">:</span><span style="color:#B5CEA8;">333</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">:</span><span style="color:#B5CEA8;">160</span><span style="color:#D4D4D4;">] = ball</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-1-4-拆分及合并图像通道" tabindex="-1"><a class="header-anchor" href="#_3-1-4-拆分及合并图像通道" aria-hidden="true">#</a> 3.1.4 拆分及合并图像通道</h3><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">b, g, r = cv2.split(img)</span></span>
<span class="line"><span style="color:#D4D4D4;">img = cv2.merge(b, g, r)</span></span>
<span class="line"></span></code></pre></div><p>使用索引更加快速、简单：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">b = img[:, :, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">img[:, :, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-1-5-为图像扩边-填充" tabindex="-1"><a class="header-anchor" href="#_3-1-5-为图像扩边-填充" aria-hidden="true">#</a> 3.1.5 为图像扩边（填充）</h3><p>如果你想在图像周围创建一个边，就像相框一样，你可以使用 <code>cv2.copyMakeBorder()</code> 函数。这经常在卷积运算或 <code>0</code> 填充时被用到。</p><table><thead><tr><th>语法</th><th><code>cv2.copyMakeBorder(src, top, bottom, left, right, borderType, dst=..., value=...)</code></th></tr></thead></table><p>这个函数包括如下参数：</p><ul><li><code>src</code> 输入图像</li><li><code>top, bottom, left, right</code> 对应边界的像素数目</li><li><code>borderType</code> 要添加那种类型的边界，类型如下 <ul><li><code>cv2.BORDER_CONSTANT</code> 添加有颜色的常数值边界，还需要下一个参数 <code>value</code></li><li><code>cv2.BORDER_REFLECT</code> 边界元素的镜像。比如 <code>fedcba|abcdefgh|hgfedcb</code></li><li><code>cv2.BORDER_REFLECT_101</code> 或 <code>cv2.BORDER_DEFAULT</code> 跟上面一样，但稍作改动。例如 <code>gfedcb|abcdefgh|gfedcba</code></li><li><code>cv2.BORDER_REPLICATE</code> 重复最后一个元素。例如 <code>aaaaaa|abcdefgh|hhhhhhh</code></li><li><code>cv2.BORDER_WRAP</code> 就像这样 <code>cdefgh|abcdefgh|abcdefg</code></li></ul></li><li><code>value</code> 边界颜色，如果边界的类型是 <code>cv2.BORDER_CONSTANT</code></li></ul><p>为了更好的理解这几种类型请看下面的演示程序：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> matplotlib.pyplot </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">BLUE = </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">img = cv2.imread(</span><span style="color:#CE9178;">&#39;messi5.jpg&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">replicate = cv2.copyMakeBorder(</span></span>
<span class="line"><span style="color:#D4D4D4;">    img, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, cv2.BORDER_REPLICATE)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">reflect = cv2.copyMakeBorder(</span></span>
<span class="line"><span style="color:#D4D4D4;">    img, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, cv2.BORDER_REFLECT)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">reflect_101 = cv2.copyMakeBorder(</span></span>
<span class="line"><span style="color:#D4D4D4;">    img, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, cv2.BORDER_REFLECT_101)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">wrap = cv2.copyMakeBorder(</span></span>
<span class="line"><span style="color:#D4D4D4;">    img, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, cv2.BORDER_WRAP)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">constant = cv2.copyMakeBorder(</span></span>
<span class="line"><span style="color:#D4D4D4;">    img, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, cv2.BORDER_CONSTANT, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=BLUE)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">plt.subplot(</span><span style="color:#B5CEA8;">231</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.imshow(img[:, :, ::-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&#39;gray&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.title(</span><span style="color:#CE9178;">&#39;original&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">plt.subplot(</span><span style="color:#B5CEA8;">232</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.imshow(replicate[:, :, ::-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&#39;gray&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.title(</span><span style="color:#CE9178;">&#39;replicate&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">plt.subplot(</span><span style="color:#B5CEA8;">233</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.imshow(reflect[:, :, ::-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&#39;gray&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.title(</span><span style="color:#CE9178;">&#39;reflect&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">plt.subplot(</span><span style="color:#B5CEA8;">234</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.imshow(reflect_101[:, :, ::-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&#39;gray&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.title(</span><span style="color:#CE9178;">&#39;reflect_101&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">plt.subplot(</span><span style="color:#B5CEA8;">235</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.imshow(wrap[:, :, ::-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&#39;gray&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.title(</span><span style="color:#CE9178;">&#39;wrap&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">plt.subplot(</span><span style="color:#B5CEA8;">236</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.imshow(constant[:, :, ::-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&#39;gray&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">plt.title(</span><span style="color:#CE9178;">&#39;constant&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">plt.show()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-图像上的算术运算" tabindex="-1"><a class="header-anchor" href="#_3-2-图像上的算术运算" aria-hidden="true">#</a> 3.2 图像上的算术运算</h2><details class="hint-container details"><summary>学习目标</summary><ul><li>图像上的加法、减法、位运算等</li><li>图像混合</li><li>函数 <ul><li><code>cv2.add()</code> 加法</li><li><code>cv2.addWeighted()</code> 带权加法，即图像混合</li><li><code>cv2.bitwise_not()</code> 按位翻转</li><li><code>cv2.bitwise_and()</code> 按位与</li></ul></li></ul></details><h3 id="_3-2-1-图像加法" tabindex="-1"><a class="header-anchor" href="#_3-2-1-图像加法" aria-hidden="true">#</a> 3.2.1 图像加法</h3><div class="hint-container warning"><p class="hint-container-title">加法操作</p><p>OpenCV 中的加法与 NumPy 的加法是有所不同的。OpenCV 的加法 是一种饱和操作，而 NumPy 的加法是一种模操作。</p></div><p>例如，在 <code>dtype=np.uint8</code> 的情况下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">UINT8 = np.uint8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">x = UINT8([</span><span style="color:#B5CEA8;">250</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">y = UINT8([</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(cv2.add(x, y))    </span><span style="color:#6A9955;"># [[255]]</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(x + y)            </span><span style="color:#6A9955;"># [4]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-2-图像混合" tabindex="-1"><a class="header-anchor" href="#_3-2-2-图像混合" aria-hidden="true">#</a> 3.2.2 图像混合</h3><p>图像混合，其实也是加法，但是不同的是两幅图像的权重不同，这就会给人一种混合或者透明的感觉。图像混合的计算公式如下</p>`,20),g=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"g"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"α"),s("mo",{stretchy:"false"},")"),s("msub",null,[s("mi",null,"f"),s("mn",null,"0")]),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"α"),s("msub",null,[s("mi",null,"f"),s("mn",null,"1")]),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," g(x) = (1 - \\alpha)f_0(x) + \\alpha f_1(x) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mclose"},")"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1076em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1076em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mclose"},")")])])])])],-1),b=s("p",null,[s("code",null,"cv2.addWeighted()"),a(" 的混合公式")],-1),C=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"d"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"t")]),s("mo",null,"="),s("mi",null,"α"),s("mo",null,"⋅"),s("mrow",null,[s("mi",{mathvariant:"normal"},"i"),s("mi",{mathvariant:"normal"},"m"),s("msub",null,[s("mi",{mathvariant:"normal"},"g"),s("mn",null,"1")])]),s("mo",null,"+"),s("mi",null,"β"),s("mo",null,"⋅"),s("mrow",null,[s("mi",{mathvariant:"normal"},"i"),s("mi",{mathvariant:"normal"},"m"),s("msub",null,[s("mi",{mathvariant:"normal"},"g"),s("mn",null,"2")])]),s("mo",null,"+"),s("mi",null,"γ")]),s("annotation",{encoding:"application/x-tex"}," \\mathrm{dst} = \\alpha \\cdot \\mathrm{img_1} + \\beta \\cdot \\mathrm{img_2} + \\gamma ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"dst")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4445em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8623em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"im"),s("span",{class:"mord"},[s("span",{class:"mord mathrm",style:{"margin-right":"0.01389em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0139em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathrm mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05278em"}},"β"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8623em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"im"),s("span",{class:"mord"},[s("span",{class:"mord mathrm",style:{"margin-right":"0.01389em"}},"g"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0139em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathrm mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05556em"}},"γ")])])])])],-1),E=o(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">img1 = cv2.imread(</span><span style="color:#CE9178;">&#39;t1.jpg&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">img2 = cv2.imread(</span><span style="color:#CE9178;">&#39;t2.jpg&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">dst = cv2.addWeighted(img1, </span><span style="color:#B5CEA8;">0.7</span><span style="color:#D4D4D4;">, img2, </span><span style="color:#B5CEA8;">0.3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">cv2.imshow(</span><span style="color:#CE9178;">&#39;dst&#39;</span><span style="color:#D4D4D4;">, dst)</span></span>
<span class="line"><span style="color:#D4D4D4;">cv2.waitKey(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">cv2.destroyAllWindows()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-3-按位运算" tabindex="-1"><a class="header-anchor" href="#_3-2-3-按位运算" aria-hidden="true">#</a> 3.2.3 按位运算</h3><p>这里包括的按位操作有：AND，OR，NOT，XOR 等。当我们提取图像的一部分，选择非矩形 ROI 时这些操作会很有用。下面的例子就是教给我们如何改变一幅图的特定区域。</p><p>我想把 OpenCV 的标志放到另一幅图像上。如果我使用加法，颜色会改变，如果使用混合，会得到透明效果，但是我不想要透明。如果他是矩形我可以象上一章那样使用 ROI。但是他不是矩形。但是我们可以通过下面的按位运算实现：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">## 加载图像</span></span>
<span class="line"><span style="color:#D4D4D4;">img1 = cv2.imread(</span><span style="color:#CE9178;">&#39;roi.jpg&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">img2 = cv2.imread(</span><span style="color:#CE9178;">&#39;opencv_logo.png&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">## 选择 logo 的 ROI</span></span>
<span class="line"><span style="color:#D4D4D4;">rows, cols, channels = img2.shape</span></span>
<span class="line"><span style="color:#D4D4D4;">roi = img1[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">:rows, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">:cols]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">## 创建一个遮罩 mask，并创建一个翻转的遮罩</span></span>
<span class="line"><span style="color:#D4D4D4;">img2gray = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)</span></span>
<span class="line"><span style="color:#D4D4D4;">ret, mask = cv2.threshold(img2gray, </span><span style="color:#B5CEA8;">175</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, cv2.THRESH_BINARY)</span></span>
<span class="line"><span style="color:#D4D4D4;">mask_inv = cv2.bitwise_not(mask)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">## 取 ROI 中与 mask 中不为零的值对应的像素的值，其他值为 0</span></span>
<span class="line"><span style="color:#6A9955;">## 其中的 mask= 不能忽略</span></span>
<span class="line"><span style="color:#D4D4D4;">img1_bg = cv2.bitwise_and(roi, roi, </span><span style="color:#9CDCFE;">mask</span><span style="color:#D4D4D4;">=mask)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">## 取 ROI 中与 mask_inv 中不为零的值对应的像素的值，其他值为 0。</span></span>
<span class="line"><span style="color:#D4D4D4;">img2_fg = cv2.bitwise_and(img2, img2, </span><span style="color:#9CDCFE;">mask</span><span style="color:#D4D4D4;">=mask_inv)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">dst = cv2.add(img1_bg, img2_fg)</span></span>
<span class="line"><span style="color:#D4D4D4;">img1[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">:rows, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">:cols] = dst</span></span>
<span class="line"><span style="color:#D4D4D4;">cv2.imshow(</span><span style="color:#CE9178;">&#39;res&#39;</span><span style="color:#D4D4D4;">, img1)</span></span>
<span class="line"><span style="color:#D4D4D4;">cv2.waitKey(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">cv2.destroyAllWindows()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-程序性能检测及优化" tabindex="-1"><a class="header-anchor" href="#_3-3-程序性能检测及优化" aria-hidden="true">#</a> 3.3 程序性能检测及优化</h2><details class="hint-container details"><summary>学习目标</summary><ul><li>检测程序的效率</li><li>一些能够提高程序效率的技巧</li><li>函数 <ul><li><code>cv2.getTickCount()</code></li><li><code>cv2.getTickFrequency()</code></li></ul></li><li>扩展 <ul><li>IPython</li><li>模块 <code>time</code> 和 <code>timeit</code></li></ul></li></ul></details><h3 id="_3-3-1-使用-opencv-检测程序效率" tabindex="-1"><a class="header-anchor" href="#_3-3-1-使用-opencv-检测程序效率" aria-hidden="true">#</a> 3.3.1 使用 OpenCV 检测程序效率</h3><p>可用函数：</p><ul><li><code>cv2.getTickCount()</code> 函数返回从参考点到这个函数被执行的时钟数。所以当你在一个函数执行前后都调用它的话，你就会得到这个函数的执行时间</li><li><code>cv2.getTickFrequency()</code> 返回时钟频率，或者说每秒钟的时钟数。所以你可以按照下面的方式得到一个函数运行了多少秒</li></ul><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"><span style="color:#D4D4D4;">e1 = cv2.getTickCount()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">## 此处是代码</span></span>
<span class="line"><span style="color:#D4D4D4;">e2 = cv2.getTickCount()</span></span>
<span class="line"><span style="color:#D4D4D4;">time = (e2 - e1) / cv2.getTickFrequency()</span></span>
<span class="line"></span></code></pre></div><p>例如，测试代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">img1 = cv2.imread(</span><span style="color:#CE9178;">&#39;t1.jpg&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">e1 = cv2.getTickCount()</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> i </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">49</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    img1 = cv2.medianBlur(img1, i)</span></span>
<span class="line"><span style="color:#D4D4D4;">e2 = cv2.getTickCount()</span></span>
<span class="line"><span style="color:#D4D4D4;">t = (e2 - e1) / cv2.getTickFrequency()</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(t)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-2-opencv-中的默认优化" tabindex="-1"><a class="header-anchor" href="#_3-3-2-opencv-中的默认优化" aria-hidden="true">#</a> 3.3.2 OpenCV 中的默认优化</h3><p>OpenCV 中的很多函数都被优化过（使用 SSE2，AVX 等）。你可以使用函数 <code>cv2.useOptimized()</code> 来查看优化是否被开启了，使用函数 <code>cv2.setUseOptimized()</code> 来开启优化。</p><p>使用 IPython 的魔术命令 <code>%timeit</code> 测试代码的：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">%timeit res = cv2.medianBlur(img, </span><span style="color:#B5CEA8;">49</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>中值滤波是被 SIMD 优化的，如果关闭优化进行测试，发现结果不同。</p><h3 id="_3-3-3-在-ipython-中检测程序效率" tabindex="-1"><a class="header-anchor" href="#_3-3-3-在-ipython-中检测程序效率" aria-hidden="true">#</a> 3.3.3 在 IPython 中检测程序效率</h3><p>当你想知道哪些程序执行得更快，例如：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">x = </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">; y = x ∗ ∗</span><span style="color:#B5CEA8;">2</span></span>
<span class="line"><span style="color:#D4D4D4;">x = </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">; y = x ∗ x</span></span>
<span class="line"><span style="color:#D4D4D4;">x = np.uint([</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">]); y = x ∗ x</span></span>
<span class="line"><span style="color:#D4D4D4;">y = np.squre(x)</span></span>
<span class="line"></span></code></pre></div><p>你可以使用上面的方法，<code>%timeit</code>。</p><p>例如，可以比较 <code>cv2.countNonZero()</code> 和 <code>np.count_nonzero()</code> 的效率差别</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">%timeit z = cv2.countNonZero(img)</span></span>
<span class="line"><span style="color:#D4D4D4;">%timeit z = np.count_nonzero(img)</span></span>
<span class="line"></span></code></pre></div><div class="hint-container info"><p class="hint-container-title">OpenCV 与 NumPy</p><p>一般情况下 OpenCV 的函数要比 NumPy 函数快。所以对于相同的操作最好使用 OpenCV 的函数。当然也有例外，尤其是当使用 NumPy 对视图（而非复制）进行操作时。</p></div><h3 id="_3-3-4-更多-ipython-的魔法命令" tabindex="-1"><a class="header-anchor" href="#_3-3-4-更多-ipython-的魔法命令" aria-hidden="true">#</a> 3.3.4 更多 IPython 的魔法命令</h3><p>还有几个魔法命令可以用来检测程序的效率、内存使用等。</p><p>常见魔法命令：</p><ul><li>使用 <code>%magic</code> 可以直接调出有关于魔法命令的详细说明文档，这就等同于 <code>vim</code> 编辑器中的 <code>:help</code> 一样</li><li>你只是想列出哪些魔法命令我们可以使用，那么可以直接调用 <code>%lsmagic</code> 进行输出</li><li>如果只是查看具体某个魔法命令的用法，那么可以直接在魔法命令之后接上一个 <code>?</code> 问号，类似于这样 <code>%run?</code></li></ul><h3 id="_3-3-5-效率优化技术" tabindex="-1"><a class="header-anchor" href="#_3-3-5-效率优化技术" aria-hidden="true">#</a> 3.3.5 效率优化技术</h3><p>算法优化原则：</p><ol><li>算法中尽量使用向量操作，因为 NumPy 和 OpenCV 都对向量操作进行了优化</li><li>利用高速缓存一致性</li></ol>`,32),_={class:"hint-container info"},A=s("p",{class:"hint-container-title"},"有用的资料",-1),B={href:"https://wiki.python.org/moin/PythonSpeed/PerformanceTips",target:"_blank",rel:"noopener noreferrer"},k={href:"http://scipy-lectures.org/advanced/advanced_numpy/index.html#advanced-numpy",target:"_blank",rel:"noopener noreferrer"},x=s("h2",{id:"_3-4-opencv-中的数学工具",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-4-opencv-中的数学工具","aria-hidden":"true"},"#"),a(" 3.4 OpenCV 中的数学工具")],-1),f=s("p",null,[s("em",null,[s("strong",null,"TODO")])],-1),O=s("p",null,"其余的内容将整理到其他地方。",-1);function R(w,T){const e=p("router-link"),c=p("Badge"),i=p("ExternalLinkIcon");return r(),d("div",null,[m,s("nav",y,[s("ul",null,[s("li",null,[n(e,{to:"#_3-1-图片"},{default:l(()=>[a("3.1 图片")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#_3-1-1-获取并修改像素值"},{default:l(()=>[a("3.1.1 获取并修改像素值")]),_:1})]),s("li",null,[n(e,{to:"#_3-1-2-获取图像属性"},{default:l(()=>[a("3.1.2 获取图像属性")]),_:1})]),s("li",null,[n(e,{to:"#_3-1-3-图像-roi"},{default:l(()=>[a("3.1.3 图像 ROI")]),_:1})]),s("li",null,[n(e,{to:"#_3-1-4-拆分及合并图像通道"},{default:l(()=>[a("3.1.4 拆分及合并图像通道")]),_:1})]),s("li",null,[n(e,{to:"#_3-1-5-为图像扩边-填充"},{default:l(()=>[a("3.1.5 为图像扩边（填充）")]),_:1})])])]),s("li",null,[n(e,{to:"#_3-2-图像上的算术运算"},{default:l(()=>[a("3.2 图像上的算术运算")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#_3-2-1-图像加法"},{default:l(()=>[a("3.2.1 图像加法")]),_:1})]),s("li",null,[n(e,{to:"#_3-2-2-图像混合"},{default:l(()=>[a("3.2.2 图像混合")]),_:1})]),s("li",null,[n(e,{to:"#_3-2-3-按位运算"},{default:l(()=>[a("3.2.3 按位运算")]),_:1})])])]),s("li",null,[n(e,{to:"#_3-3-程序性能检测及优化"},{default:l(()=>[a("3.3 程序性能检测及优化")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#_3-3-1-使用-opencv-检测程序效率"},{default:l(()=>[a("3.3.1 使用 OpenCV 检测程序效率")]),_:1})]),s("li",null,[n(e,{to:"#_3-3-2-opencv-中的默认优化"},{default:l(()=>[a("3.3.2 OpenCV 中的默认优化")]),_:1})]),s("li",null,[n(e,{to:"#_3-3-3-在-ipython-中检测程序效率"},{default:l(()=>[a("3.3.3 在 IPython 中检测程序效率")]),_:1})]),s("li",null,[n(e,{to:"#_3-3-4-更多-ipython-的魔法命令"},{default:l(()=>[a("3.3.4 更多 IPython 的魔法命令")]),_:1})]),s("li",null,[n(e,{to:"#_3-3-5-效率优化技术"},{default:l(()=>[a("3.3.5 效率优化技术")]),_:1})])])]),s("li",null,[n(e,{to:"#_3-4-opencv-中的数学工具"},{default:l(()=>[a("3.4 OpenCV 中的数学工具")]),_:1})])])]),v,s("p",null,[n(c,{type:"tip"},{default:l(()=>[a("定义")]),_:1}),a(),u,a("（Region Of Interest），即感兴趣区域，对 ROI 的操作通常指的是对图像的特定区域进行操作。")]),h,g,b,C,E,s("div",_,[A,s("p",null,[a("Python 速度优化技巧 "),s("a",B,[a("官方文档"),n(i)]),a("。")]),s("p",null,[a("NumPy 优化技巧 "),s("a",k,[a("scipy-lectures.org: NumPy 进阶"),n(i)]),a("。")])]),x,f,O])}const P=t(D,[["render",R],["__file","index.html.vue"]]);export{P as default};
