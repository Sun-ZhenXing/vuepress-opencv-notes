import{_ as i,M as e,p as u,q as r,R as n,N as a,V as t,t as s,a1 as c}from"./framework-d3922052.js";const d={},m=n("h1",{id:"_3-核心操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-核心操作","aria-hidden":"true"},"#"),s(" 3. 核心操作")],-1),k={class:"table-of-contents"},v=c(`<h2 id="_3-1-图片" tabindex="-1"><a class="header-anchor" href="#_3-1-图片" aria-hidden="true">#</a> 3.1 图片</h2><details class="hint-container details"><summary>学习目标</summary><ul><li>获取像素值并修改</li><li>获取图像的属性</li><li>获取图像的 ROI</li><li>图像通道的拆分及合并</li><li>图像的填充</li><li>函数 <ul><li>学习使用 NumPy 的函数库处理图像</li></ul></li></ul></details><div class="hint-container info"><p class="hint-container-title">NumPy</p><p>几乎所有这些操作与 NumPy 的关系都比与 OpenCV 的关系更加紧密，因此熟练 NumPy 可以帮助我们写出性能更好的代码。</p></div><h3 id="_3-1-1-获取并修改像素值" tabindex="-1"><a class="header-anchor" href="#_3-1-1-获取并修改像素值" aria-hidden="true">#</a> 3.1.1 获取并修改像素值</h3><p>我们注意到，一张打开的图片就是 <code>np.ndarray</code> 对象，可以使用 NumPy 对图像进行任意的操作：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;messi5.jpg&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

img<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span>
</code></pre></div><div class="hint-container warning"><p class="hint-container-title">大量修改像素操作</p><p>NumPy 是经过优化了的进行快速矩阵运算的软件包。所以我们不推荐 逐个获取像素值并修改，这样会很慢，能有矩阵运算就不要用循环。</p></div><p>更优雅的方法：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>img<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;messi5.jpg&#39;</span><span class="token punctuation">)</span>

img<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
img<span class="token punctuation">.</span>itemset<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="_3-1-2-获取图像属性" tabindex="-1"><a class="header-anchor" href="#_3-1-2-获取图像属性" aria-hidden="true">#</a> 3.1.2 获取图像属性</h3><p>可以参考 <code>np.ndarray</code> 属性：</p><ul><li><code>img.shape</code> 形状，即一个包含行、列和通道的元组</li><li><code>img.size</code> 元素的数目，即像素乘通道的总数</li><li><code>img.dtype</code> 元素类型</li></ul><h3 id="_3-1-3-图像-roi" tabindex="-1"><a class="header-anchor" href="#_3-1-3-图像-roi" aria-hidden="true">#</a> 3.1.3 图像 ROI</h3>`,13),h=n("strong",null,"ROI",-1),g=c(`<div class="language-python" data-ext="py"><pre class="language-python"><code>ball <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">280</span><span class="token punctuation">:</span><span class="token number">340</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">:</span><span class="token number">390</span><span class="token punctuation">]</span>
img<span class="token punctuation">[</span><span class="token number">273</span><span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">:</span><span class="token number">160</span><span class="token punctuation">]</span> <span class="token operator">=</span> ball
</code></pre></div><h3 id="_3-1-4-拆分及合并图像通道" tabindex="-1"><a class="header-anchor" href="#_3-1-4-拆分及合并图像通道" aria-hidden="true">#</a> 3.1.4 拆分及合并图像通道</h3><div class="language-python" data-ext="py"><pre class="language-python"><code>b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
</code></pre></div><p>使用索引更加快速、简单：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>b <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre></div><h3 id="_3-1-5-为图像扩边-填充" tabindex="-1"><a class="header-anchor" href="#_3-1-5-为图像扩边-填充" aria-hidden="true">#</a> 3.1.5 为图像扩边（填充）</h3><p>如果你想在图像周围创建一个边，就像相框一样，你可以使用 <code>cv2.copyMakeBorder()</code> 函数。这经常在卷积运算或 <code>0</code> 填充时被用到。</p><table><thead><tr><th>语法</th><th><code>cv2.copyMakeBorder(src, top, bottom, left, right, borderType, dst=..., value=...)</code></th></tr></thead></table><p>这个函数包括如下参数：</p><ul><li><code>src</code> 输入图像</li><li><code>top, bottom, left, right</code> 对应边界的像素数目</li><li><code>borderType</code> 要添加那种类型的边界，类型如下 <ul><li><code>cv2.BORDER_CONSTANT</code> 添加有颜色的常数值边界，还需要下一个参数 <code>value</code></li><li><code>cv2.BORDER_REFLECT</code> 边界元素的镜像。比如 <code>fedcba|abcdefgh|hgfedcb</code></li><li><code>cv2.BORDER_REFLECT_101</code> 或 <code>cv2.BORDER_DEFAULT</code> 跟上面一样，但稍作改动。例如 <code>gfedcb|abcdefgh|gfedcba</code></li><li><code>cv2.BORDER_REPLICATE</code> 重复最后一个元素。例如 <code>aaaaaa|abcdefgh|hhhhhhh</code></li><li><code>cv2.BORDER_WRAP</code> 就像这样 <code>cdefgh|abcdefgh|abcdefg</code></li></ul></li><li><code>value</code> 边界颜色，如果边界的类型是 <code>cv2.BORDER_CONSTANT</code></li></ul><p>为了更好的理解这几种类型请看下面的演示程序：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

BLUE <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>

img<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;messi5.jpg&#39;</span><span class="token punctuation">)</span>

replicate <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>
    img<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_REPLICATE<span class="token punctuation">)</span>

reflect <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>
    img<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_REFLECT<span class="token punctuation">)</span>

reflect_101 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>
    img<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_REFLECT_101<span class="token punctuation">)</span>

wrap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>
    img<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_WRAP<span class="token punctuation">)</span>

constant <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>
    img<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_CONSTANT<span class="token punctuation">,</span> value<span class="token operator">=</span>BLUE<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">231</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;gray&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;original&#39;</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">232</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>replicate<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;gray&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;replicate&#39;</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>reflect<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;gray&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;reflect&#39;</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>reflect_101<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;gray&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;reflect_101&#39;</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">235</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wrap<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;gray&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;wrap&#39;</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">236</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>constant<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;gray&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;constant&#39;</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-图像上的算术运算" tabindex="-1"><a class="header-anchor" href="#_3-2-图像上的算术运算" aria-hidden="true">#</a> 3.2 图像上的算术运算</h2><details class="hint-container details"><summary>学习目标</summary><ul><li>图像上的加法、减法、位运算等</li><li>图像混合</li><li>函数 <ul><li><code>cv2.add()</code> 加法</li><li><code>cv2.addWeighted()</code> 带权加法，即图像混合</li><li><code>cv2.bitwise_not()</code> 按位翻转</li><li><code>cv2.bitwise_and()</code> 按位与</li></ul></li></ul></details><h3 id="_3-2-1-图像加法" tabindex="-1"><a class="header-anchor" href="#_3-2-1-图像加法" aria-hidden="true">#</a> 3.2.1 图像加法</h3><div class="hint-container warning"><p class="hint-container-title">加法操作</p><p>OpenCV 中的加法与 NumPy 的加法是有所不同的。OpenCV 的加法 是一种饱和操作，而 NumPy 的加法是一种模操作。</p></div><p>例如，在 <code>dtype=np.uint8</code> 的情况下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

UINT8 <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8

x <span class="token operator">=</span> UINT8<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> UINT8<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># [[255]]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>            <span class="token comment"># [4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-2-图像混合" tabindex="-1"><a class="header-anchor" href="#_3-2-2-图像混合" aria-hidden="true">#</a> 3.2.2 图像混合</h3><p>图像混合，其实也是加法，但是不同的是两幅图像的权重不同，这就会给人一种混合或者透明的感觉。图像混合的计算公式如下</p>`,20),b=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"g"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",null,"−"),n("mi",null,"α"),n("mo",{stretchy:"false"},")"),n("msub",null,[n("mi",null,"f"),n("mn",null,"0")]),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mi",null,"α"),n("msub",null,[n("mi",null,"f"),n("mn",null,"1")]),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"}," g(x) = (1 - \\alpha)f_0(x) + \\alpha f_1(x) ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),n("span",{class:"mclose"},")"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.1076em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"0")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.1076em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")")])])])])],-1),y=n("p",null,[n("code",null,"cv2.addWeighted()"),s(" 的混合公式")],-1),_=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"d"),n("mi",{mathvariant:"normal"},"s"),n("mi",{mathvariant:"normal"},"t")]),n("mo",null,"="),n("mi",null,"α"),n("mo",null,"⋅"),n("mrow",null,[n("mi",{mathvariant:"normal"},"i"),n("mi",{mathvariant:"normal"},"m"),n("msub",null,[n("mi",{mathvariant:"normal"},"g"),n("mn",null,"1")])]),n("mo",null,"+"),n("mi",null,"β"),n("mo",null,"⋅"),n("mrow",null,[n("mi",{mathvariant:"normal"},"i"),n("mi",{mathvariant:"normal"},"m"),n("msub",null,[n("mi",{mathvariant:"normal"},"g"),n("mn",null,"2")])]),n("mo",null,"+"),n("mi",null,"γ")]),n("annotation",{encoding:"application/x-tex"}," \\mathrm{dst} = \\alpha \\cdot \\mathrm{img_1} + \\beta \\cdot \\mathrm{img_2} + \\gamma ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"dst")]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4445em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"⋅"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8623em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"im"),n("span",{class:"mord"},[n("span",{class:"mord mathrm",style:{"margin-right":"0.01389em"}},"g"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.0139em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathrm mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05278em"}},"β"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"⋅"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8623em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"im"),n("span",{class:"mord"},[n("span",{class:"mord mathrm",style:{"margin-right":"0.01389em"}},"g"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.0139em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathrm mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05556em"}},"γ")])])])])],-1),f=c(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2

img1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;t1.jpg&#39;</span><span class="token punctuation">)</span>
img2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;t2.jpg&#39;</span><span class="token punctuation">)</span>

dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> img2<span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;dst&#39;</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-3-按位运算" tabindex="-1"><a class="header-anchor" href="#_3-2-3-按位运算" aria-hidden="true">#</a> 3.2.3 按位运算</h3><p>这里包括的按位操作有：AND，OR，NOT，XOR 等。当我们提取图像的一部分，选择非矩形 ROI 时这些操作会很有用。下面的例子就是教给我们如何改变一幅图的特定区域。</p><p>我想把 OpenCV 的标志放到另一幅图像上。如果我使用加法，颜色会改变，如果使用混合，会得到透明效果，但是我不想要透明。如果他是矩形我可以象上一章那样使用 ROI。但是他不是矩形。但是我们可以通过下面的按位运算实现：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token comment">## 加载图像</span>
img1<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;roi.jpg&#39;</span><span class="token punctuation">)</span>
img2<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;opencv_logo.png&#39;</span><span class="token punctuation">)</span>

<span class="token comment">## 选择 logo 的 ROI</span>
rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> channels <span class="token operator">=</span> img2<span class="token punctuation">.</span>shape
roi <span class="token operator">=</span> img1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols<span class="token punctuation">]</span>

<span class="token comment">## 创建一个遮罩 mask，并创建一个翻转的遮罩</span>
img2gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img2<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>
ret<span class="token punctuation">,</span> mask <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img2gray<span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>
mask_inv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_not<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>

<span class="token comment">## 取 ROI 中与 mask 中不为零的值对应的像素的值，其他值为 0</span>
<span class="token comment">## 其中的 mask= 不能忽略</span>
img1_bg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>roi<span class="token punctuation">,</span> roi<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span>

<span class="token comment">## 取 ROI 中与 mask_inv 中不为零的值对应的像素的值，其他值为 0。</span>
img2_fg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>img2<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask_inv<span class="token punctuation">)</span>

dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>add<span class="token punctuation">(</span>img1_bg<span class="token punctuation">,</span> img2_fg<span class="token punctuation">)</span>
img1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols<span class="token punctuation">]</span> <span class="token operator">=</span> dst
cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;res&#39;</span><span class="token punctuation">,</span> img1<span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-程序性能检测及优化" tabindex="-1"><a class="header-anchor" href="#_3-3-程序性能检测及优化" aria-hidden="true">#</a> 3.3 程序性能检测及优化</h2><details class="hint-container details"><summary>学习目标</summary><ul><li>检测程序的效率</li><li>一些能够提高程序效率的技巧</li><li>函数 <ul><li><code>cv2.getTickCount()</code></li><li><code>cv2.getTickFrequency()</code></li></ul></li><li>扩展 <ul><li>IPython</li><li>模块 <code>time</code> 和 <code>timeit</code></li></ul></li></ul></details><h3 id="_3-3-1-使用-opencv-检测程序效率" tabindex="-1"><a class="header-anchor" href="#_3-3-1-使用-opencv-检测程序效率" aria-hidden="true">#</a> 3.3.1 使用 OpenCV 检测程序效率</h3><p>可用函数：</p><ul><li><code>cv2.getTickCount()</code> 函数返回从参考点到这个函数被执行的时钟数。所以当你在一个函数执行前后都调用它的话，你就会得到这个函数的执行时间</li><li><code>cv2.getTickFrequency()</code> 返回时钟频率，或者说每秒钟的时钟数。所以你可以按照下面的方式得到一个函数运行了多少秒</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
e1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getTickCount<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## 此处是代码</span>
e2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getTickCount<span class="token punctuation">(</span><span class="token punctuation">)</span>
time <span class="token operator">=</span> <span class="token punctuation">(</span>e2 <span class="token operator">-</span> e1<span class="token punctuation">)</span> <span class="token operator">/</span> cv2<span class="token punctuation">.</span>getTickFrequency<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>例如，测试代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

img1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;t1.jpg&#39;</span><span class="token punctuation">)</span>

e1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getTickCount<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    img1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>medianBlur<span class="token punctuation">(</span>img1<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
e2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getTickCount<span class="token punctuation">(</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> <span class="token punctuation">(</span>e2 <span class="token operator">-</span> e1<span class="token punctuation">)</span> <span class="token operator">/</span> cv2<span class="token punctuation">.</span>getTickFrequency<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-2-opencv-中的默认优化" tabindex="-1"><a class="header-anchor" href="#_3-3-2-opencv-中的默认优化" aria-hidden="true">#</a> 3.3.2 OpenCV 中的默认优化</h3><p>OpenCV 中的很多函数都被优化过（使用 SSE2，AVX 等）。你可以使用函数 <code>cv2.useOptimized()</code> 来查看优化是否被开启了，使用函数 <code>cv2.setUseOptimized()</code> 来开启优化。</p><p>使用 IPython 的魔术命令 <code>%timeit</code> 测试代码的：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">%</span>timeit res <span class="token operator">=</span> cv2<span class="token punctuation">.</span>medianBlur<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span>
</code></pre></div><p>中值滤波是被 SIMD 优化的，如果关闭优化进行测试，发现结果不同。</p><h3 id="_3-3-3-在-ipython-中检测程序效率" tabindex="-1"><a class="header-anchor" href="#_3-3-3-在-ipython-中检测程序效率" aria-hidden="true">#</a> 3.3.3 在 IPython 中检测程序效率</h3><p>当你想知道哪些程序执行得更快，例如：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> y <span class="token operator">=</span> x ∗ ∗<span class="token number">2</span>
x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> y <span class="token operator">=</span> x ∗ x
x <span class="token operator">=</span> np<span class="token punctuation">.</span>uint<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> y <span class="token operator">=</span> x ∗ x
y <span class="token operator">=</span> np<span class="token punctuation">.</span>squre<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre></div><p>你可以使用上面的方法，<code>%timeit</code>。</p><p>例如，可以比较 <code>cv2.countNonZero()</code> 和 <code>np.count_nonzero()</code> 的效率差别</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">%</span>timeit z <span class="token operator">=</span> cv2<span class="token punctuation">.</span>countNonZero<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
<span class="token operator">%</span>timeit z <span class="token operator">=</span> np<span class="token punctuation">.</span>count_nonzero<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container info"><p class="hint-container-title">OpenCV 与 NumPy</p><p>一般情况下 OpenCV 的函数要比 NumPy 函数快。所以对于相同的操作最好使用 OpenCV 的函数。当然也有例外，尤其是当使用 NumPy 对视图（而非复制）进行操作时。</p></div><h3 id="_3-3-4-更多-ipython-的魔法命令" tabindex="-1"><a class="header-anchor" href="#_3-3-4-更多-ipython-的魔法命令" aria-hidden="true">#</a> 3.3.4 更多 IPython 的魔法命令</h3><p>还有几个魔法命令可以用来检测程序的效率、内存使用等。</p><p>常见魔法命令：</p><ul><li>使用 <code>%magic</code> 可以直接调出有关于魔法命令的详细说明文档，这就等同于 <code>vim</code> 编辑器中的 <code>:help</code> 一样</li><li>你只是想列出哪些魔法命令我们可以使用，那么可以直接调用 <code>%lsmagic</code> 进行输出</li><li>如果只是查看具体某个魔法命令的用法，那么可以直接在魔法命令之后接上一个 <code>?</code> 问号，类似于这样 <code>%run?</code></li></ul><h3 id="_3-3-5-效率优化技术" tabindex="-1"><a class="header-anchor" href="#_3-3-5-效率优化技术" aria-hidden="true">#</a> 3.3.5 效率优化技术</h3><p>算法优化原则：</p><ol><li>算法中尽量使用向量操作，因为 NumPy 和 OpenCV 都对向量操作进行了优化</li><li>利用高速缓存一致性</li></ol>`,32),x={class:"hint-container info"},w=n("p",{class:"hint-container-title"},"有用的资料",-1),R={href:"https://wiki.python.org/moin/PythonSpeed/PerformanceTips",target:"_blank",rel:"noopener noreferrer"},O={href:"http://scipy-lectures.org/advanced/advanced_numpy/index.html#advanced-numpy",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"_3-4-opencv-中的数学工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-4-opencv-中的数学工具","aria-hidden":"true"},"#"),s(" 3.4 OpenCV 中的数学工具")],-1),N=n("p",null,[n("em",null,[n("strong",null,"TODO")])],-1),T=n("p",null,"其余的内容将整理到其他地方。",-1);function E(B,P){const p=e("router-link"),l=e("Badge"),o=e("ExternalLinkIcon");return u(),r("div",null,[m,n("nav",k,[n("ul",null,[n("li",null,[a(p,{to:"#_3-1-图片"},{default:t(()=>[s("3.1 图片")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_3-1-1-获取并修改像素值"},{default:t(()=>[s("3.1.1 获取并修改像素值")]),_:1})]),n("li",null,[a(p,{to:"#_3-1-2-获取图像属性"},{default:t(()=>[s("3.1.2 获取图像属性")]),_:1})]),n("li",null,[a(p,{to:"#_3-1-3-图像-roi"},{default:t(()=>[s("3.1.3 图像 ROI")]),_:1})]),n("li",null,[a(p,{to:"#_3-1-4-拆分及合并图像通道"},{default:t(()=>[s("3.1.4 拆分及合并图像通道")]),_:1})]),n("li",null,[a(p,{to:"#_3-1-5-为图像扩边-填充"},{default:t(()=>[s("3.1.5 为图像扩边（填充）")]),_:1})])])]),n("li",null,[a(p,{to:"#_3-2-图像上的算术运算"},{default:t(()=>[s("3.2 图像上的算术运算")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_3-2-1-图像加法"},{default:t(()=>[s("3.2.1 图像加法")]),_:1})]),n("li",null,[a(p,{to:"#_3-2-2-图像混合"},{default:t(()=>[s("3.2.2 图像混合")]),_:1})]),n("li",null,[a(p,{to:"#_3-2-3-按位运算"},{default:t(()=>[s("3.2.3 按位运算")]),_:1})])])]),n("li",null,[a(p,{to:"#_3-3-程序性能检测及优化"},{default:t(()=>[s("3.3 程序性能检测及优化")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#_3-3-1-使用-opencv-检测程序效率"},{default:t(()=>[s("3.3.1 使用 OpenCV 检测程序效率")]),_:1})]),n("li",null,[a(p,{to:"#_3-3-2-opencv-中的默认优化"},{default:t(()=>[s("3.3.2 OpenCV 中的默认优化")]),_:1})]),n("li",null,[a(p,{to:"#_3-3-3-在-ipython-中检测程序效率"},{default:t(()=>[s("3.3.3 在 IPython 中检测程序效率")]),_:1})]),n("li",null,[a(p,{to:"#_3-3-4-更多-ipython-的魔法命令"},{default:t(()=>[s("3.3.4 更多 IPython 的魔法命令")]),_:1})]),n("li",null,[a(p,{to:"#_3-3-5-效率优化技术"},{default:t(()=>[s("3.3.5 效率优化技术")]),_:1})])])]),n("li",null,[a(p,{to:"#_3-4-opencv-中的数学工具"},{default:t(()=>[s("3.4 OpenCV 中的数学工具")]),_:1})])])]),v,n("p",null,[a(l,{type:"tip",vertical:"middle"},{default:t(()=>[s("定义")]),_:1}),s(),h,s("（Region Of Interest），即感兴趣区域，对 ROI 的操作通常指的是对图像的特定区域进行操作。")]),g,b,y,_,f,n("div",x,[w,n("p",null,[s("Python 速度优化技巧 "),n("a",R,[s("官方文档"),a(o)]),s("。")]),n("p",null,[s("NumPy 优化技巧 "),n("a",O,[s("scipy-lectures.org: NumPy 进阶"),a(o)]),s("。")])]),C,N,T])}const V=i(d,[["render",E],["__file","index.html.vue"]]);export{V as default};
