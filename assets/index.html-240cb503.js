import{_ as e,r as o,o as t,c,b as s,d as n,a as p,e as a}from"./app-e045e1fd.js";const r="/vuepress-opencv-notes/assets/2022-11-12-11-11-09-08476644.webp",D={},i=a('<h1 id="_12-使用-opencv-进行深度学习" tabindex="-1"><a class="header-anchor" href="#_12-使用-opencv-进行深度学习" aria-hidden="true">#</a> 12. 使用 OpenCV 进行深度学习</h1><p>本章我们将使用 OpenCV 的深度学习接口，并将其用于目标检测和人脸检测。</p><p>本章介绍以下主题：</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 什么是深度学习</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> OpenCV 如何与深度学习合作，以及如何实现深度学习神经网络（NN）</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> YOLO，一种非常快速的深度学习对象检测算法</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 使用 SSD 进行人脸检测</label></li></ul><h2 id="_12-1-技术要求" tabindex="-1"><a class="header-anchor" href="#_12-1-技术要求" aria-hidden="true">#</a> 12.1 技术要求</h2>',5),y={class:"task-list-container"},m=a('<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 使用编译有深度学习模块（<code>dnn</code>）的 OpenCV</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 推荐使用支持 CUDA 的 NVIDIA GPU</label></li>',2),d={class:"task-list-item"},C=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-6",checked:"checked",disabled:"disabled"},null,-1),v={class:"task-list-item-label",for:"task-item-6"},u={href:"https://github.com/PacktPublishing/Learn-OpenCV-4-By-Building-Projects-Second-Edition/tree/master/Chapter_12",target:"_blank",rel:"noopener noreferrer"},h=a('<h2 id="_12-2-深度学习简介" tabindex="-1"><a class="header-anchor" href="#_12-2-深度学习简介" aria-hidden="true">#</a> 12.2 深度学习简介</h2><div class="hint-container tip"><p class="hint-container-title">学习提示</p><p>如果需要了解，只靠本节的内容不足以了解，所以这里没有这部分笔记，建议有深度学习基础再阅读本章。</p></div><h2 id="_12-3-opencv-中的深度学习" tabindex="-1"><a class="header-anchor" href="#_12-3-opencv-中的深度学习" aria-hidden="true">#</a> 12.3 OpenCV 中的深度学习</h2><p>深度学习模块在 3.1 作为贡献模块引入，并成为 3.3 版本的一部分。但直到 3.4.3+ 和 4.x 版本才被广泛使用。</p><p>OpenCV 不支持反向传播，这意味 OpenCV 只能使用训练好的网络进行前向推理。这是因为 OpenCV 没有必要实现别人（PyTorch、TensorFlow 等）擅长的东西，OpenCV 更适合部署，因此应该专注于优化推理的计算速度。</p>',5),b=s("em",null,"TensorEditor",-1),g={href:"https://www.lobe.ai/",target:"_blank",rel:"noopener noreferrer"},E=a('<p>当我们得到一个令人满意的神经网络，我们就可以把网络的结构和参数导入到 OpenCV 中进行推理啦。</p><h2 id="_12-4-yolo-用于实时对象检测" tabindex="-1"><a class="header-anchor" href="#_12-4-yolo-用于实时对象检测" aria-hidden="true">#</a> 12.4 YOLO 用于实时对象检测</h2><p>YOLO 是目前最快的对象检测和识别算法之一，NVIDIA Titan X 上可以达到 30 fps（YOLOv3）。</p><div class="hint-container info"><p class="hint-container-title">YOLOv7 是更好的选择</p><p>当前（2022 年 11 月 11 日）YOLOv7 比以前的版本更快也更加精确，后面也将 YOLOv7 的 OpenCV 部署发布出来。</p></div><h3 id="_12-4-1-yolov3-深度学习模型架构" tabindex="-1"><a class="header-anchor" href="#_12-4-1-yolov3-深度学习模型架构" aria-hidden="true">#</a> 12.4.1 YOLOv3 深度学习模型架构</h3>',5),A=s("p",null,[n("YOLO 把整张图像划分成 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"S")]),s("annotation",{encoding:"application/x-tex"},"S \\times S")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S")])])]),n(" 大小的网络，对于每个网格，YOLO 网络模型预测 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B")]),s("annotation",{encoding:"application/x-tex"},"B")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])])]),n(" 个边界框，然后得出边界框包含可能对象的置信度。")],-1),f=s("p",null,[s("img",{src:r,alt:"",loading:"lazy"})],-1),B=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"预测框"),s("p",null,"在上面的例子中，图片被分成了 49 个框，每个框预测 2 个预测框（bounding box），因此上面的图中有 98 个预测框。"),s("p",null,"可以看到这些预测框中有的边框比较粗，有的比较细，这是置信度不同的表现，置信度高的比较粗，置信度低的比较细。")],-1),x=s("p",null,[n("每个预测框有 5 个量，即中心位置（"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"x,\\,y")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])]),n("）、宽高（"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"w"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"w,\\,h")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"h")])])]),n("）和置信度。")],-1),_=s("p",null,"输出结果的总数应该是：",-1),k=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"B"),s("mo",null,"×"),s("mo",{stretchy:"false"},"("),s("mn",null,"5"),s("mo",null,"+"),s("mrow",null,[s("mi",{mathvariant:"normal"},"c"),s("mi",{mathvariant:"normal"},"l"),s("mi",{mathvariant:"normal"},"a"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"e"),s("mi",{mathvariant:"normal"},"s")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," S \\times S \\times B \\times (5 + \\mathrm{classes}) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"classes")]),s("span",{class:"mclose"},")")])])])])],-1),F=s("p",null,[n("YOLO 默认使用 80 个类别 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"19"),s("mo",null,"×"),s("mn",null,"19")]),s("annotation",{encoding:"application/x-tex"},"19 \\times 19")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"19")])])]),n(" 个网格，5 个分量即预测框的 5 个量，类别数使用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"c"),s("mi",{mathvariant:"normal"},"l"),s("mi",{mathvariant:"normal"},"a"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"e"),s("mi",{mathvariant:"normal"},"s")]),s("annotation",{encoding:"application/x-tex"},"\\mathrm{classes}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"classes")])])])]),n(" 表示，即 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"c"),s("mi",{mathvariant:"normal"},"l"),s("mi",{mathvariant:"normal"},"a"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"s"),s("mi",{mathvariant:"normal"},"e"),s("mi",{mathvariant:"normal"},"s")]),s("mo",null,"="),s("mn",null,"80")]),s("annotation",{encoding:"application/x-tex"},"\\mathrm{classes} = 80")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"classes")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"80")])])]),n("，这里的类别用 One-Hot 编码表示，总数为：")],-1),q=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mn",null,"19"),s("mo",null,"×"),s("mn",null,"19"),s("mo",null,"×"),s("mn",null,"5"),s("mo",null,"×"),s("mo",{stretchy:"false"},"("),s("mn",null,"5"),s("mo",null,"+"),s("mn",null,"80"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"425")]),s("annotation",{encoding:"application/x-tex"}," 19 \\times 19 \\times 5 \\times (5 + 80) = 425 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"80"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"425")])])])])],-1),w=s("p",null,"排列方式是：",-1),S=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"S"),s("mo",null,"×"),s("mi",null,"B"),s("mo",null,"×"),s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"x"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"y"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"w"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mi",null,"h"),s("mo",{separator:"true"},","),s("mtext",null," "),s("mrow",null,[s("mi",{mathvariant:"normal"},"c"),s("mi",{mathvariant:"normal"},"o"),s("mi",{mathvariant:"normal"},"n"),s("mi",{mathvariant:"normal"},"f")]),s("mo",{separator:"true"},","),s("mtext",null," "),s("msub",null,[s("mi",null,"c"),s("mn",null,"1")]),s("mo",{separator:"true"},","),s("mtext",null," "),s("msub",null,[s("mi",null,"c"),s("mn",null,"2")]),s("mo",{separator:"true"},","),s("mtext",null," "),s("mo",null,"⋯"),s("mtext",null," "),s("mo",{separator:"true"},","),s("mtext",null," "),s("msub",null,[s("mi",null,"c"),s("mn",null,"80")])])])])])]),s("mo",{fence:"true"},"]")])]),s("annotation",{encoding:"application/x-tex"}," S \\times S \\times B \\times \\begin{bmatrix} x,\\, y,\\, w,\\, h,\\, \\mathrm{conf},\\, c_1,\\, c_2,\\, \\cdots,\\, c_{80} \\end{bmatrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2em","vertical-align":"-0.35em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size1"},"[")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.85em"}},[s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm",style:{"margin-right":"0.07778em"}},"conf")]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"c"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"c"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"c"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"80")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.35em"}},[s("span")])])])])])]),s("span",{class:"mclose delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size1"},"]")])])])])])])],-1),O=a(`<p>YOLOv3 架构基于 DarkNet，DarkNet 包含 53 个网络层，YOLOv3 增加了 53 个 层，所以它有 106 层。如果需要更小更快，可以参考 TinyYOLO 或其他迷你版本。</p><h3 id="_12-4-2-yolo-数据集、词汇表和模型" tabindex="-1"><a class="header-anchor" href="#_12-4-2-yolo-数据集、词汇表和模型" aria-hidden="true">#</a> 12.4.2 YOLO 数据集、词汇表和模型</h3><p>YOLO 使用 COCO 数据集，COCO 数据集包含 80 个类别。</p><p>下载文件：</p><ul><li>模型文件：<code>https://pjreddie.com/media/files/yolov3.weights</code></li><li>网络文件：<code>https://github.com/pjreddie/darknet/blob/master/cfg/yolov3.cfg</code></li><li>词汇表：<code>https://github.com/pjreddie/darknet/blob/master/data/coco.names</code></li></ul><p>将 <code>yolov3.weights</code>、<code>yolov3.cfg</code> 和 <code>coco.names</code> 放置在本项目的根目录。</p><h3 id="_12-4-3-将-yolo-导入-opencv" tabindex="-1"><a class="header-anchor" href="#_12-4-3-将-yolo-导入-opencv" aria-hidden="true">#</a> 12.4.3 将 YOLO 导入 OpenCV</h3><p>深度学习模块需要使用命名空间 <code>cv::dnn</code>，引入 <code>&lt;opencv2/dnn.hpp&gt;</code>。</p><p>OpenCV 的 <code>Mat</code> 图像需要转换为 DNN 张量 / Blob 格式才能输入到神经网络中，可以使用 <code>cv::dnn::blobFromImage()</code> 函数进行转换。</p><p><code>cv::dnn::blobFromImage()</code> 函数的声明如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">blobFromImage</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">InputArray</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">image</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">OutputArray</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">blob</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">scalefactor</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1.0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Size</span><span style="color:#569CD6;">&amp;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Size</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Scalar</span><span style="color:#569CD6;">&amp;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">mean</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Scalar</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">bool</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">swapRB</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">bool</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">crop</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ddepth</span><span style="color:#D4D4D4;">=CV_32F</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">Mat</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">blobFromImage</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">InputArray</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">image</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">scalefactor</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1.0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Size</span><span style="color:#569CD6;">&amp;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Size</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Scalar</span><span style="color:#569CD6;">&amp;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">mean</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Scalar</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">bool</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">swapRB</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">bool</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">crop</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ddepth</span><span style="color:#D4D4D4;">=CV_32F</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其参数如下：</p><ul><li><code>image</code>：输入图像（可能是 1、3 或 4 通道）</li><li><code>blob</code>：输出 <code>Mat</code> 对象</li><li><code>scalefactor</code>：图像值乘数</li><li><code>size</code>：</li><li><code>mean</code>：</li><li><code>swapRB</code>：交换颜色通道</li><li><code>crop</code>：是否裁剪</li><li><code>ddepth</code>：</li></ul><p>我们的代码大致如下，其中的后处理和获取输出名称的函数并未进行实现，完整的实现可以参考本章的代码仓库。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;fstream&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;sstream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/core.hpp&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/dnn.hpp&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/highgui.hpp&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/imgproc.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">constexpr</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;"> CONFIDENCE_THRESHOLD = </span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">constexpr</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;"> NMS_THRESHOLD = </span><span style="color:#B5CEA8;">0.4</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">constexpr</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> INPUT_WIDTH = </span><span style="color:#B5CEA8;">416</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">constexpr</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> INPUT_HEIGHT = </span><span style="color:#B5CEA8;">416</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::vector&lt;</span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::string&gt; classes;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">vector</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">getOutputsNames</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">dnn</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Net</span><span style="color:#569CD6;">&amp;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">postprocess</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Mat</span><span style="color:#569CD6;">&amp;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">frame</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">vector</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Mat</span><span style="color:#D4D4D4;">&gt;</span><span style="color:#569CD6;">&amp;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">outs</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argc</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">char*</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">[]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (argc &lt; </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::cout &lt;&lt; </span><span style="color:#CE9178;">&quot;Usage: &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] &lt;&lt; </span><span style="color:#CE9178;">&quot; &lt;image&gt;&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::string classesFile = </span><span style="color:#CE9178;">&quot;coco.names&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::ifstream </span><span style="color:#DCDCAA;">ifs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">classesFile</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">c_str</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::string line;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">getline</span><span style="color:#D4D4D4;">(ifs, line))</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">classes</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push_back</span><span style="color:#D4D4D4;">(line);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::string modelConfiguration = </span><span style="color:#CE9178;">&quot;yolov3.cfg&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::string modelWeights = </span><span style="color:#CE9178;">&quot;yolov3.weights&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">dnn</span><span style="color:#D4D4D4;">::Net net = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">dnn</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">readNetFromDarknet</span><span style="color:#D4D4D4;">(modelConfiguration, modelWeights);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setPreferableBackend</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">dnn</span><span style="color:#D4D4D4;">::DNN_BACKEND_OPENCV);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setPreferableTarget</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">dnn</span><span style="color:#D4D4D4;">::DNN_TARGET_CPU);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat input, blob;</span></span>
<span class="line"><span style="color:#D4D4D4;">    input = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imread</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">input</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::cout &lt;&lt; </span><span style="color:#CE9178;">&quot;Could not read the image: &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] &lt;&lt; </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">dnn</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">blobFromImage</span><span style="color:#D4D4D4;">(input, blob, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> / </span><span style="color:#B5CEA8;">255.f</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">Size</span><span style="color:#D4D4D4;">(INPUT_WIDTH, INPUT_HEIGHT), </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">Scalar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">), </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setInput</span><span style="color:#D4D4D4;">(blob);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::vector&lt;</span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat&gt; outs;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forward</span><span style="color:#D4D4D4;">(outs, </span><span style="color:#DCDCAA;">getOutputsNames</span><span style="color:#D4D4D4;">(net));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">postprocess</span><span style="color:#D4D4D4;">(input, outs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">#ifndef</span><span style="color:#569CD6;"> Profile</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::vector&lt;</span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;">&gt; layersTimes;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;"> freq = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">getTickFrequency</span><span style="color:#D4D4D4;">() / </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;"> t = </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getPerfProfile</span><span style="color:#D4D4D4;">(layersTimes) / freq;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::string label = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">format</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Inference time for a frame : </span><span style="color:#9CDCFE;">%.2f</span><span style="color:#CE9178;"> ms&quot;</span><span style="color:#D4D4D4;">, t);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::cout &lt;&lt; label &lt;&lt; </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::endl;</span></span>
<span class="line"><span style="color:#C586C0;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imshow</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;object detection&quot;</span><span style="color:#D4D4D4;">, input);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">waitKey</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-5-使用-ssd-进行人脸检测" tabindex="-1"><a class="header-anchor" href="#_12-5-使用-ssd-进行人脸检测" aria-hidden="true">#</a> 12.5 使用 SSD 进行人脸检测</h2><p>单摄检测（Single Shot Detection，SSD）是另一种快速、准确的深度学习对象检测方法，它具有和 YOLO 类似的概念，可以在同一架构预测对象和边界框。</p><h3 id="_12-5-1-ssd-模型架构" tabindex="-1"><a class="header-anchor" href="#_12-5-1-ssd-模型架构" aria-hidden="true">#</a> 12.5.1 SSD 模型架构</h3><h3 id="_12-5-2-将-ssd-人脸检测导入-opencv" tabindex="-1"><a class="header-anchor" href="#_12-5-2-将-ssd-人脸检测导入-opencv" aria-hidden="true">#</a> 12.5.2 将 SSD 人脸检测导入 OpenCV</h3><p>本文的 SSD 模型使用 Caffe 格式，需要 OpenCV 使用 <code>cv::dnn::readNetFromCaffe()</code> 来创建网络。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/dnn.hpp&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/highgui.hpp&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/imgproc.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">using</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">namespace</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">using</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">namespace</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">using</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">namespace</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">dnn</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">size_t</span><span style="color:#D4D4D4;"> inWidth = </span><span style="color:#B5CEA8;">300</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">size_t</span><span style="color:#D4D4D4;"> inHeight = </span><span style="color:#B5CEA8;">300</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;"> inScaleFactor = </span><span style="color:#B5CEA8;">1.0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Scalar</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">meanVal</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">104.0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">177.0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">123.0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">char</span><span style="color:#D4D4D4;">* about =</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;This sample uses Single-Shot Detector &quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;(https://arxiv.org/abs/1512.02325) &quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;with ResNet-10 architecture to detect faces on camera/video/image.</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;More information about the training is available here: &quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;&lt;OPENCV_SRC_DIR&gt;/samples/dnn/face_detector/&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;how_to_train_face_detector.txt</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;.caffemodel model&#39;s file is available here: &quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;&lt;OPENCV_SRC_DIR&gt;/samples/dnn/face_detector/&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;res10_300x300_ssd_iter_140000.caffemodel</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;.prototxt file is available here: &quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;&lt;OPENCV_SRC_DIR&gt;/samples/dnn/face_detector/deploy.prototxt</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">char</span><span style="color:#D4D4D4;">* params =</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{ help           | false | print usage          }&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{ proto          |       | model configuration (deploy.prototxt) }&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{ model          |       | model weights &quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;(res10_300x300_ssd_iter_140000.caffemodel) }&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{ camera_device  | 0     | camera device number }&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{ video          |       | video or image for detection }&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{ opencl         | false | enable OpenCL }&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{ min_confidence | 0.5   | min confidence       }&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argc</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">char**</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    CommandLineParser </span><span style="color:#DCDCAA;">parser</span><span style="color:#D4D4D4;">(argc, argv, params);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">bool</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;help&quot;</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        cout &lt;&lt; about &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printMessage</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    String modelConfiguration = </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;string&gt;(</span><span style="color:#CE9178;">&quot;proto&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    String modelBinary = </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;string&gt;(</span><span style="color:#CE9178;">&quot;model&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    //! [Initialize network]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">dnn</span><span style="color:#D4D4D4;">::Net net = </span><span style="color:#DCDCAA;">readNetFromCaffe</span><span style="color:#D4D4D4;">(modelConfiguration, modelBinary);</span></span>
<span class="line"><span style="color:#6A9955;">    //! [Initialize network]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        cerr &lt;&lt; </span><span style="color:#CE9178;">&quot;Can&#39;t load network by using the following files: &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        cerr &lt;&lt; </span><span style="color:#CE9178;">&quot;prototxt:   &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; modelConfiguration &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        cerr &lt;&lt; </span><span style="color:#CE9178;">&quot;caffemodel: &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; modelBinary &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        cerr &lt;&lt; </span><span style="color:#CE9178;">&quot;Models are available here:&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        cerr &lt;&lt; </span><span style="color:#CE9178;">&quot;&lt;OPENCV_SRC_DIR&gt;/samples/dnn/face_detector&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        cerr &lt;&lt; </span><span style="color:#CE9178;">&quot;or here:&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        cerr &lt;&lt; </span><span style="color:#CE9178;">&quot;https://github.com/opencv/opencv/tree/master/samples/dnn/&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#CE9178;">&quot;face_detector&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">             &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">exit</span><span style="color:#D4D4D4;">(-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">bool</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;opencl&quot;</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setPreferableTarget</span><span style="color:#D4D4D4;">(DNN_TARGET_OPENCL);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    VideoCapture cap;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;String&gt;(</span><span style="color:#CE9178;">&quot;video&quot;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> cameraDevice = </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;camera_device&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        cap = </span><span style="color:#DCDCAA;">VideoCapture</span><span style="color:#D4D4D4;">(cameraDevice);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">cap</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isOpened</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            cout &lt;&lt; </span><span style="color:#CE9178;">&quot;Couldn&#39;t find camera: &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; cameraDevice &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">cap</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">open</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;String&gt;(</span><span style="color:#CE9178;">&quot;video&quot;</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">cap</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isOpened</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            cout &lt;&lt; </span><span style="color:#CE9178;">&quot;Couldn&#39;t open image or video: &quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">                 &lt;&lt; </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;String&gt;(</span><span style="color:#CE9178;">&quot;video&quot;</span><span style="color:#D4D4D4;">) &lt;&lt; endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (;;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        Mat frame;</span></span>
<span class="line"><span style="color:#D4D4D4;">        cap &gt;&gt; frame;</span><span style="color:#6A9955;">  // get a new frame from camera/video or read image</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">frame</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#DCDCAA;">waitKey</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">frame</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">channels</span><span style="color:#D4D4D4;">() == </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">cvtColor</span><span style="color:#D4D4D4;">(frame, frame, COLOR_BGRA2BGR);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">        //! [Prepare blob]</span></span>
<span class="line"><span style="color:#D4D4D4;">        Mat inputBlob = </span><span style="color:#DCDCAA;">blobFromImage</span><span style="color:#D4D4D4;">(frame, inScaleFactor,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                      </span><span style="color:#DCDCAA;">Size</span><span style="color:#D4D4D4;">(inWidth, inHeight), meanVal, </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                      </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">  // Convert Mat to batch of images</span></span>
<span class="line"><span style="color:#6A9955;">        //! [Prepare blob]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">        //! [Set input blob]</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setInput</span><span style="color:#D4D4D4;">(inputBlob, </span><span style="color:#CE9178;">&quot;data&quot;</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">  // set the network input</span></span>
<span class="line"><span style="color:#6A9955;">        //! [Set input blob]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">        //! [Make forward pass]</span></span>
<span class="line"><span style="color:#D4D4D4;">        Mat detection = </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forward</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;detection_out&quot;</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">  // compute output</span></span>
<span class="line"><span style="color:#6A9955;">        //! [Make forward pass]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        vector&lt;</span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;">&gt; layersTimings;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;"> freq = </span><span style="color:#DCDCAA;">getTickFrequency</span><span style="color:#D4D4D4;">() / </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;"> time = </span><span style="color:#9CDCFE;">net</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getPerfProfile</span><span style="color:#D4D4D4;">(layersTimings) / freq;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        Mat </span><span style="color:#DCDCAA;">detectionMat</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">detection</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">detection</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">], CV_32F,</span></span>
<span class="line"><span style="color:#D4D4D4;">                         </span><span style="color:#9CDCFE;">detection</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">ptr</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        ostringstream ss;</span></span>
<span class="line"><span style="color:#D4D4D4;">        ss &lt;&lt; </span><span style="color:#CE9178;">&quot;FPS: &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;"> / time &lt;&lt; </span><span style="color:#CE9178;">&quot; ; time: &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; time &lt;&lt; </span><span style="color:#CE9178;">&quot; ms&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">putText</span><span style="color:#D4D4D4;">(frame, </span><span style="color:#9CDCFE;">ss</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">str</span><span style="color:#D4D4D4;">(), </span><span style="color:#DCDCAA;">Point</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">), </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">Scalar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;"> confidenceThreshold = </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#CE9178;">&quot;min_confidence&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> i = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;">detectionMat</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rows</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;"> confidence = </span><span style="color:#9CDCFE;">detectionMat</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">at</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">&gt;(i, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (confidence &gt; confidenceThreshold) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> xLeftBottom =</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#569CD6;">static_cast</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">detectionMat</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">at</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">&gt;(i, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">) * </span><span style="color:#9CDCFE;">frame</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">cols</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> yLeftBottom =</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#569CD6;">static_cast</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">detectionMat</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">at</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">&gt;(i, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">) * </span><span style="color:#9CDCFE;">frame</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rows</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> xRightTop =</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#569CD6;">static_cast</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">detectionMat</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">at</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">&gt;(i, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">) * </span><span style="color:#9CDCFE;">frame</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">cols</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> yRightTop =</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#569CD6;">static_cast</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">detectionMat</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">at</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">&gt;(i, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">) * </span><span style="color:#9CDCFE;">frame</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rows</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">                Rect </span><span style="color:#DCDCAA;">object</span><span style="color:#D4D4D4;">((</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">)xLeftBottom, (</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">)yLeftBottom,</span></span>
<span class="line"><span style="color:#D4D4D4;">                            (</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">)(xRightTop - xLeftBottom),</span></span>
<span class="line"><span style="color:#D4D4D4;">                            (</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">)(yRightTop - yLeftBottom));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#DCDCAA;">rectangle</span><span style="color:#D4D4D4;">(frame, object, </span><span style="color:#DCDCAA;">Scalar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">ss</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">str</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                ss &lt;&lt; confidence;</span></span>
<span class="line"><span style="color:#D4D4D4;">                String </span><span style="color:#DCDCAA;">conf</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ss</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">str</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">                String label = </span><span style="color:#CE9178;">&quot;Face: &quot;</span><span style="color:#D4D4D4;"> + conf;</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> baseLine = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">                Size labelSize =</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#DCDCAA;">getTextSize</span><span style="color:#D4D4D4;">(label, FONT_HERSHEY_SIMPLEX, </span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, &amp;baseLine);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#DCDCAA;">rectangle</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">                    frame,</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#DCDCAA;">Rect</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Point</span><span style="color:#D4D4D4;">(xLeftBottom, yLeftBottom - </span><span style="color:#9CDCFE;">labelSize</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">height</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">                         </span><span style="color:#DCDCAA;">Size</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">labelSize</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">width</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">labelSize</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">height</span><span style="color:#D4D4D4;"> + baseLine)),</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#DCDCAA;">Scalar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">), FILLED);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#DCDCAA;">putText</span><span style="color:#D4D4D4;">(frame, label, </span><span style="color:#DCDCAA;">Point</span><span style="color:#D4D4D4;">(xLeftBottom, yLeftBottom),</span></span>
<span class="line"><span style="color:#D4D4D4;">                        FONT_HERSHEY_SIMPLEX, </span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">Scalar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">imshow</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;detections&quot;</span><span style="color:#D4D4D4;">, frame);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">waitKey</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-6-总结" tabindex="-1"><a class="header-anchor" href="#_12-6-总结" aria-hidden="true">#</a> 12.6 总结</h2>`,22);function M(L,N){const l=o("ExternalLinkIcon");return t(),c("div",null,[i,s("ul",y,[m,s("li",d,[C,s("label",v,[s("a",u,[n("本章代码"),p(l)])])])]),h,s("p",null,[n("你可以从头开始创建网络，也可以使用现有的网络。有一些网站（例如 "),b,n("（已失效） 和 "),s("a",g,[n("lobe.ai"),p(l)]),n("）能够从可视化的设计器中生成代码来方便我们进行训练。")]),E,A,f,B,x,_,k,F,q,w,S,O])}const z=e(D,[["render",M],["__file","index.html.vue"]]);export{z as default};
