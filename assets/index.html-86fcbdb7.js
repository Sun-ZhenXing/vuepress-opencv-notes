import{_ as l,M as i,p as r,q as u,N as k,V as a,a1 as e,R as n,t as s}from"./framework-35c50e38.js";const d={},m=e('<h1 id="opencv-使用-cmake-构建跨平台应用" tabindex="-1"><a class="header-anchor" href="#opencv-使用-cmake-构建跨平台应用" aria-hidden="true">#</a> OpenCV 使用 CMake 构建跨平台应用</h1><h2 id="_1-定义标准化的工具" tabindex="-1"><a class="header-anchor" href="#_1-定义标准化的工具" aria-hidden="true">#</a> 1. 定义标准化的工具</h2><p>首先，我们习惯上定义一个公共头文件 <code>common.h</code>，包含一些和系统有关的函数和宏。</p><p>考虑到 Windows 臭名昭著的乱码和字符集问题，我们使用 <code>wchar_t</code> 类型来解决，其中：</p><ul><li>宏 <code>DLL_EXPORT</code> 表示这个函数被导出</li><li>宏 <code>S</code> 表示将字符串常量转换为当前系统上的特定类型字符串</li><li>类型 <code>path_t</code> 表示当前系统上的字符指针类型</li><li>函数 <code>toStr()</code> 则表示将当前系统上的特定类型字符串转换为 <code>std::string</code></li></ul><p>下面是头文件和实现函数：</p>',6),v=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// common.h"),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"ifndef"),s(),n("span",{class:"token expression"},"COMMON_H")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"COMMON_H")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string>")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"if"),s(),n("span",{class:"token expression"},"_WIN32")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"DLL_EXPORT"),s(),n("span",{class:"token expression"},[n("span",{class:"token keyword"},"extern"),s()]),n("span",{class:"token string"},'"C"'),s(),n("span",{class:"token expression"},[n("span",{class:"token function"},"__declspec"),n("span",{class:"token punctuation"},"("),s("dllexport"),n("span",{class:"token punctuation"},")")])]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name function"},"S"),n("span",{class:"token expression"},[n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},")"),s(" L")]),n("span",{class:"token punctuation"},"##"),n("span",{class:"token expression"},"t")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<windows.h>")]),s(`

`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"wchar_t"),n("span",{class:"token operator"},"*"),s(" path_t"),n("span",{class:"token punctuation"},";"),s(`

std`),n("span",{class:"token double-colon punctuation"},"::"),s("string "),n("span",{class:"token function"},"toStr"),n("span",{class:"token punctuation"},"("),s("LPCWSTR pwszSrc"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"else")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name"},"DLL_EXPORT"),s(),n("span",{class:"token expression"},[n("span",{class:"token keyword"},"extern"),s()]),n("span",{class:"token string"},'"C"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"define"),s(),n("span",{class:"token macro-name function"},"S"),n("span",{class:"token expression"},[n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token punctuation"},")"),s(" t")])]),s(`

`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"char"),n("span",{class:"token operator"},"*"),s(" path_t"),n("span",{class:"token punctuation"},";"),s(`

std`),n("span",{class:"token double-colon punctuation"},"::"),s("string "),n("span",{class:"token function"},"toStr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" path_t path"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif"),s("  "),n("span",{class:"token comment"},"// _WIN32")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif"),s("  "),n("span",{class:"token comment"},"// COMMON_H")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// common.cpp"),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"common.h"')]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"if"),s(),n("span",{class:"token expression"},"_WIN32")]),s(`

std`),n("span",{class:"token double-colon punctuation"},"::"),s("string "),n("span",{class:"token function"},"toStr"),n("span",{class:"token punctuation"},"("),s("LPCWSTR pwszSrc"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" nLen "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"WideCharToMultiByte"),n("span",{class:"token punctuation"},"("),s("CP_ACP"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" pwszSrc"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("nLen "),n("span",{class:"token operator"},"<="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),n("span",{class:"token operator"},"*"),s(" pszDst "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},"["),s("nLen"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"NULL"),s(),n("span",{class:"token operator"},"=="),s(" pszDst"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"WideCharToMultiByte"),n("span",{class:"token punctuation"},"("),s("CP_ACP"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" pwszSrc"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" pszDst"),n("span",{class:"token punctuation"},","),s(" nLen"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    pszDst`),n("span",{class:"token punctuation"},"["),s("nLen "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("string "),n("span",{class:"token function"},"strTemp"),n("span",{class:"token punctuation"},"("),s("pszDst"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"delete"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" pszDst"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" strTemp"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"else")]),s(`

std`),n("span",{class:"token double-colon punctuation"},"::"),s("string "),n("span",{class:"token function"},"toStr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" path_t path"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),s("string s "),n("span",{class:"token operator"},"="),s(" path"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" s"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"endif"),s("  "),n("span",{class:"token comment"},"// _WIN32")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=e(`<h2 id="_2-cmake-定义" tabindex="-1"><a class="header-anchor" href="#_2-cmake-定义" aria-hidden="true">#</a> 2. CMake 定义</h2><p>这里我们以 YOLO 举例，假设我的项目里有三个编译目标（<code>yolov3</code>、<code>yolov5</code> 和 <code>yolov7</code>）：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>yolo-collections<span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">17</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_EXTENSIONS</span> <span class="token boolean">OFF</span><span class="token punctuation">)</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>OpenCV REQUIRED<span class="token punctuation">)</span>

<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>OpenCV_LIBRARY_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">macro</span><span class="token punctuation">(</span>create_target name<span class="token punctuation">)</span>
    <span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>name<span class="token punctuation">}</span> <span class="token string">&quot;src/<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">name</span><span class="token punctuation">}</span></span>.cpp&quot;</span> <span class="token string">&quot;src/common.cpp&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>
        <span class="token punctuation">\${</span>name<span class="token punctuation">}</span>
        <span class="token punctuation">\${</span>OpenCV_LIBS<span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token keyword">endmacro</span><span class="token punctuation">(</span>create_target name<span class="token punctuation">)</span>

<span class="token function">create_target</span><span class="token punctuation">(</span>yolov3<span class="token punctuation">)</span>
<span class="token function">create_target</span><span class="token punctuation">(</span>yolov5<span class="token punctuation">)</span>
<span class="token function">create_target</span><span class="token punctuation">(</span>yolov7<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-构建项目" tabindex="-1"><a class="header-anchor" href="#_3-构建项目" aria-hidden="true">#</a> 3. 构建项目</h2><h3 id="_3-1-windows-下编译构建" tabindex="-1"><a class="header-anchor" href="#_3-1-windows-下编译构建" aria-hidden="true">#</a> 3.1 Windows 下编译构建</h3><p>Windows 使用 CMake 可以采用几种不同的方式：</p><ol><li>创建 Visual Studio 项目，在 VS 中构建，详情略</li><li>使用 CMake-GUI 编译，下面是步骤</li><li>使用 CMake 命令行工具</li></ol><p>下面是使用 CMake-GUI 的步骤：</p><ol><li>配置 <code>source</code> 文件夹和 <code>build</code> 文件夹</li><li>点击 <strong>配置</strong>（Configure）</li><li>点击 <strong>生成</strong>（Generate）</li></ol><div class="hint-container warning"><p class="hint-container-title">使用 MinGW</p><p>在使用 CMake 推荐使用 Visual Studio 作为后端，MinGW 在 Windows 上构建项目并不被官方支持，因此有很多项目无法成功构建。在本站下面的项目都不会使用 MinGW 构建，如果需要请自行尝试，遇到问题也无法提供解答。</p></div><p>下面举例使用 VS 2019 作为后端，用于生成 64 位程序的命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>cmake <span class="token parameter variable">-B</span> ./build <span class="token parameter variable">-G</span> <span class="token string">&quot;Visual Studio 16 2019&quot;</span> <span class="token parameter variable">-T</span> <span class="token assign-left variable">host</span><span class="token operator">=</span>x64 <span class="token parameter variable">-A</span> x64 <span class="token builtin class-name">.</span>
cmake <span class="token parameter variable">--build</span> ./build <span class="token parameter variable">--config</span> Release <span class="token parameter variable">--target</span> ALL_BUILD <span class="token parameter variable">-j</span> <span class="token number">4</span> --
</code></pre></div><h3 id="_3-2-linux-mac-系统编译构建" tabindex="-1"><a class="header-anchor" href="#_3-2-linux-mac-系统编译构建" aria-hidden="true">#</a> 3.2 Linux / Mac 系统编译构建</h3><p>直接使用 CMake 即可：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> build
<span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span>/src
<span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span>
</code></pre></div><p>如果不想每次都创建 <code>build/</code> 文件夹，可以在 CMake 中指定编译目标输出路径：</p><div class="language-cmake" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span>/build<span class="token punctuation">)</span>
</code></pre></div>`,17);function _(y,w){const t=i("CodeTabs");return r(),u("div",null,[m,k(t,{id:"37",data:[{title:"h"},{title:"cpp"}]},{tab0:a(({title:c,value:o,isActive:p})=>[v]),tab1:a(({title:c,value:o,isActive:p})=>[b]),_:1}),h])}const f=l(d,[["render",_],["__file","index.html.vue"]]);export{f as default};
