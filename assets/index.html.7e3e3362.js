import{_ as t,r as p,o as c,c as o,a as n,b as s,d as l,e as a}from"./app.b8266146.js";const i={},u=a('<h1 id="_2-opencv-基础知识导论" tabindex="-1"><a class="header-anchor" href="#_2-opencv-基础知识导论" aria-hidden="true">#</a> 2. OpenCV 基础知识导论</h1><p>本章介绍以下主题：</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 使用 CMake 配置项目</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 读取 / 写入图像</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 读取视频和访问相机</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 主要的图像结构</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 其他重要的结构</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 基本矩阵运算简介</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 使用 XML / YAML 存储 OpenCV API 进行文件存储操作</label></li></ul><h2 id="_2-1-技术要求" tabindex="-1"><a class="header-anchor" href="#_2-1-技术要求" aria-hidden="true">#</a> 2.1 技术要求</h2>',4),d={class:"task-list-container"},r=n("li",{class:"task-list-item"},[n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-7",checked:"checked",disabled:"disabled"}),n("label",{class:"task-list-item-label",for:"task-item-7"}," 熟悉 C++ 语言")],-1),k={class:"task-list-item"},m=n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-8",checked:"checked",disabled:"disabled"},null,-1),v={class:"task-list-item-label",for:"task-item-8"},b={href:"https://github.com/PacktPublishing/Learn-OpenCV-4-By-Building-Projects-Second-Edition/tree/master/Chapter_02",target:"_blank",rel:"noopener noreferrer"},h=n("li",{class:"task-list-item"},[n("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-9",checked:"checked",disabled:"disabled"}),n("label",{class:"task-list-item-label",for:"task-item-9"}," 现代操作系统，例如 Ubuntu 20+ 或者 Windows 10+")],-1),g=a(`<h2 id="_2-2-基本-cmake-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-2-基本-cmake-配置文件" aria-hidden="true">#</a> 2.2 基本 CMake 配置文件</h2><p>CMake 可以使用 <code>CMakeLists.txt</code> 配置编译过程，其文件内容类似于：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 指定 CMake 最小版本</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>

<span class="token comment"># 项目名，此名称保存在 PROJECT_NAME</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>cmake-test<span class="token punctuation">)</span>

<span class="token comment"># 添加编译目标：编译 main.cpp 为可执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>project(cmake-test)</code> 后，这个名称可以通过 <code>PROJECT_NAME</code> 来访问。<code>\${}</code> 表达式能够访问上下文环境中定义的变量，上面的例子即使用项目名作为可执行文件名称。</p><h2 id="_2-3-创建一个库" tabindex="-1"><a class="header-anchor" href="#_2-3-创建一个库" aria-hidden="true">#</a> 2.3 创建一个库</h2><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 创建动态链接库</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>Hello hello.cpp<span class="token punctuation">)</span>

<span class="token comment"># 创建可执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>main main.cpp<span class="token punctuation">)</span>

<span class="token comment"># 将目标链接到指定库</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>main Hello<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">链接行为</p><p>链接库的时候指定 <code>SHARED</code> 或者 <code>STATIC</code> 能指定生成的库是静态库（<code>.a</code> / <code>.lib</code>）还是共享库（<code>.so</code> / <code>.dll</code>）。</p><p>CMake 的链接是静态优先的，但查找库的时候默认查找 <code>.so</code> 文件，可以配合几个参数来个性化 CMake 设置：</p><ul><li><code>set(CMAKE_FIND_LIBRARY_SUFFIXES .a)</code> 设置查找库名后缀</li><li><code>find_library()</code> 查找指定库</li></ul><p>创建库的时候也可以指定可见属性：</p><ul><li>如果源文件（<code>.cpp</code> / <code>.cc</code>）中包含第三方头文件，但是头文件（例如 <code>.hpp</code>）中不包含该第三方文件头，采用 <code>PRIVATE</code></li><li>如果源文件和头文件中都包含该第三方文件头，采用 <code>PUBLIC</code></li><li>如果头文件中包含该第三方文件头，但是源文件中不包含，采用 <code>INTERFACE</code></li></ul></div><h2 id="_2-4-管理依赖项" tabindex="-1"><a class="header-anchor" href="#_2-4-管理依赖项" aria-hidden="true">#</a> 2.4 管理依赖项</h2><p>CMake 具有搜索依赖项和外部库的能力，这使得我们能够根据项目中的复杂组件构建复杂的项目。</p><p>我们下面将 OpenCV 添加到项目中：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>chapter2<span class="token punctuation">)</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>OpenCV REQUIRED<span class="token punctuation">)</span>
<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;OpenCV version: <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">OpenCV_VERSION</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>OpenCV_LIBRARY_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>SRC main.cpp<span class="token punctuation">)</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> <span class="token punctuation">\${</span>SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> <span class="token punctuation">\${</span>OpenCV_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <code>cmake_policy()</code> 来设置当前的策略，来避免 CMake 版本过高或者过低的问题，语法：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_policy</span><span class="token punctuation">(</span><span class="token property">VERSION</span> &lt;min<span class="token punctuation">&gt;</span>[...&lt;max<span class="token punctuation">&gt;</span>]<span class="token punctuation">)</span>
<span class="token comment"># 或者</span>
<span class="token keyword">cmake_policy</span><span class="token punctuation">(</span>SET CMP[NNNN] &lt;variable<span class="token punctuation">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_policy</span><span class="token punctuation">(</span>SET CMP0012 NEW<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>CMP0012</code> 规则为 <code>if()</code> 能够识别数字和布尔常量。</p><p>如果我们只需要 OpenCV 的某一个子模块，也可以使用：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">find_package</span><span class="token punctuation">(</span>OpenCV REQUIRED core<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样我们只会引入 OpenCV 的 <code>core</code> 模块。</p><p>我们还可以在一个变量里面添加更多的值，例如：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span>SRC main.cpp
        utils.cpp
        color.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-让脚本更复杂" tabindex="-1"><a class="header-anchor" href="#_2-5-让脚本更复杂" aria-hidden="true">#</a> 2.5 让脚本更复杂</h2><p>下面我们创建一个更复杂的例子，包括子文件夹，库和可执行文件。使用一个 <code>CMakeLists.txt</code> 就可以构建，更常见的方式是为子项目使用不同的 <code>CMakeLists.txt</code>，可以使其更加灵活便捷。</p><p>下面是目录结构：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>CMakeLists.txt
main.cpp
utils/
    CMakeLists.txt
    computeTime.cpp
    computeTime.h
    logger.cpp
    logger.h
    plotting.cpp
    plotting.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目根目录的 <code>CMakeLists.txt</code> 的内容是：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>chapter2<span class="token punctuation">)</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>OpenCV REQUIRED<span class="token punctuation">)</span>

<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>OpenCV_LIBRARY_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>utils<span class="token punctuation">)</span>

<span class="token keyword">option</span><span class="token punctuation">(</span>WITH_LOG <span class="token string">&quot;Build with output logs and images int tmp&quot;</span> <span class="token boolean">OFF</span><span class="token punctuation">)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>WITH_LOG<span class="token punctuation">)</span>
    <span class="token keyword">add_definitions</span><span class="token punctuation">(</span>-DLOG<span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> main.cpp<span class="token punctuation">)</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> <span class="token punctuation">\${</span>OpenCV_LIBS<span class="token punctuation">}</span> Utils<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>add_subdirectory()</code> 告诉 CMake 分析所需子文件夹的 <code>CMakeLists.txt</code> 。</p><p>下面是 <code>utils/</code> 文件夹下面的 <code>CMakeLists.txt</code>：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span>UTILS_LIB_SRC
    computeTime.cpp
    logger.cpp
    plotting.cpp
<span class="token punctuation">)</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>Utils <span class="token punctuation">\${</span>UTILS_LIB_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>Utils <span class="token namespace">PUBLIC</span> <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>option()</code> 可用于创建变量，并包含描述。变量被定义后，可以通过预编译指令来使用：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LOG</span></span>
    <span class="token function">logi</span><span class="token punctuation">(</span><span class="token string">&quot;Number of iteration %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们已经基本入门了 CMake 了，可以在不同的操作系统中构建我们的项目。</p><h2 id="_2-6-图像与矩阵" tabindex="-1"><a class="header-anchor" href="#_2-6-图像与矩阵" aria-hidden="true">#</a> 2.6 图像与矩阵</h2><p>任何图像都可以表示为包含一系列数字的矩阵，一般这些数字用于表示光的波长或波长范围的光强度的测量结果。图像中的每个点被称为像素，每个像素可以存储一个或多个值。</p><p>这些储存值的不同决定了图像的不同类别</p><ul><li>只有一个比特的二进制图像</li><li>灰度图</li><li>三通道彩色图像</li></ul>`,37),y=n("p",null,[s("一般使用一个字节来保存（例如 RGB888），其范围是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0"),n("mo",null,"−"),n("mn",null,"255")]),n("annotation",{encoding:"application/x-tex"},"0-255")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"0"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"255")])])]),s("，也有例外，例如 HDR 或热成像通常使用浮点数。")],-1),_=n("p",null,[s("OpenCV 使用 "),n("code",null,"Mat"),s(" 类来储存图像，灰度图为一个矩阵。而 RGB 彩色图像使用 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"w"),n("mo",null,"×"),n("mi",null,"h"),n("mo",null,"×"),n("mi",null,"c")]),n("annotation",{encoding:"application/x-tex"},"w \\times h \\times c")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"c")])])]),s(" 的矩阵来表示（分别是宽度、高度和通道数）。")],-1),w=a(`<p>OpenCV 的图像保存格式为 <strong>行 -&gt; 列 -&gt; BGR</strong>，读取一个像素的指针：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>val <span class="token operator">=</span> row_i <span class="token operator">*</span> num_cols <span class="token operator">*</span> channels <span class="token operator">+</span> col_i <span class="token operator">*</span> channels<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container info"><p class="custom-container-title">使用指针访问</p><p>OpenCV 函数非常适合用于随机访问，但是有时直接访问内存更有效（使用指针运算），例如当我们必须在循环中访问所有像素的时候。</p></div><h2 id="_2-7-读-写图像" tabindex="-1"><a class="header-anchor" href="#_2-7-读-写图像" aria-hidden="true">#</a> 2.7 读 / 写图像</h2><p>我们直接看代码：</p><div class="custom-container warning"><p class="custom-container-title">代码风格</p><p>本文的代码风格和书本略有不同，如果不说明，本文都不使用 <code>using namespace</code> 来引入命名空间，这样做是为了防止潜在的命名冲突。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/core.hpp&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui.hpp&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cv<span class="token double-colon punctuation">::</span>Mat color <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">&quot;lena.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cv<span class="token double-colon punctuation">::</span>Mat gray <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">&quot;lena.jpg&quot;</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果图片为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> gray<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Could not open or find the image&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 写入文件</span>
    cv<span class="token double-colon punctuation">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">&quot;lena_gray.png&quot;</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> myRow <span class="token operator">=</span> color<span class="token punctuation">.</span>cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> myCol <span class="token operator">=</span> color<span class="token punctuation">.</span>rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// 读取指定位置像素值</span>
    cv<span class="token double-colon punctuation">::</span>Vec3b myPixel <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Vec3b<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>myRow<span class="token punctuation">,</span> myCol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Pixel at (&quot;</span> <span class="token operator">&lt;&lt;</span> myRow <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> myCol <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;): (&quot;</span>
              <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>myPixel<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>myPixel<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span>
              <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>myPixel<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;)&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">// 显示图片</span>
    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">&quot;Color&quot;</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">&quot;Gray&quot;</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 持续等待直到任意按键被按下</span>
    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;opencv2/core.hpp&gt;</code> 包含了基本的图像数据处理功能，包括基本的类（例如矩阵）。</p><p><code>&lt;opencv2/highgui.hpp&gt;</code> 包含了读写函数和 GUI 相关功能。</p><p><code>imread()</code> 函数是读取图像的主函数。打开一个图像，并使用矩阵储存它。它接收两个参数，第一个参数是图像路径的字符串。第二个参数是可选的，常用选项为：</p><table><thead><tr><th>名称</th><th>实际值</th><th>功能</th></tr></thead><tbody><tr><td><code>cv::IMREAD_UNCHANGED</code></td><td><code>enum -1</code></td><td>如果有深度则保留深度</td></tr><tr><td><code>cv::IMREAD_COLOR</code></td><td><code>enum 1</code>（默认）</td><td>转换为三通道图像</td></tr><tr><td><code>cv::IMREAD_GRAYSCALE</code></td><td><code>enum 0</code></td><td>转换为灰度图</td></tr></tbody></table><p>我们创建以下示例 <code>CMakeLists.txt</code>，并编译代码：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>chapter2<span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">17</span><span class="token punctuation">)</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>OpenCV REQUIRED<span class="token punctuation">)</span>
<span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">&quot;OpenCV version: <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">OpenCV_VERSION</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>OpenCV_LIB_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> main.cpp<span class="token punctuation">)</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> <span class="token punctuation">\${</span>OpenCV_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> build
<span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span>
<span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Windows 编译</p><p>Windows 使用 CMake 可以采用几种不同的方式：</p><ol><li>创建 Visual Studio 项目，具体方法请自行搜索网络</li><li>使用 CMake-GUI 编译，下面是步骤</li><li>使用 CMake 命令行工具</li></ol><p>下面是使用 CMake-GUI 的步骤：</p><ol><li>配置 <code>source</code> 文件夹和 <code>build</code> 文件夹</li><li>点击配置（Configure）</li><li>点击生成（Generate）</li></ol><p>在使用 CMake 推荐仍然使用 Visual Studio 作为后端，MinGW 在 Windows 并不被官方支持，因此有很多项目无法成功构建。下面的命令就是使用 VS 2019 作为后端生成 64 位程序的示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cmake <span class="token parameter variable">-B</span> ./build <span class="token parameter variable">-G</span> <span class="token string">&quot;Visual Studio 16 2019&quot;</span> <span class="token parameter variable">-T</span> <span class="token assign-left variable">host</span><span class="token operator">=</span>x64 <span class="token parameter variable">-A</span> x64 <span class="token builtin class-name">.</span>
cmake <span class="token parameter variable">--build</span> ./build <span class="token parameter variable">--config</span> Release <span class="token parameter variable">--target</span> ALL_BUILD <span class="token parameter variable">-j</span> <span class="token number">4</span> --
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>新版本的 OpenCV 和旧版本的 Windows 驱动可能有冲突，产生一些问题，阅读详情参见附录。</p></div><h2 id="_2-8-读取视频和摄像头" tabindex="-1"><a class="header-anchor" href="#_2-8-读取视频和摄像头" aria-hidden="true">#</a> 2.8 读取视频和摄像头</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/core.hpp&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui.hpp&gt;</span></span>

<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> keys <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;{help h usage ? | | print this message}&quot;</span>
    <span class="token string">&quot;{@video | | Video file, if not defined try to use webcamera}&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cv<span class="token double-colon punctuation">::</span>CommandLineParser <span class="token function">parser</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    parser<span class="token punctuation">.</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token string">&quot;This program shows how to read video from a file or camera.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;help&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parser<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>string arg <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cv<span class="token double-colon punctuation">::</span>VideoCapture <span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>CAP_MSMF<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cap<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        cap<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cap<span class="token punctuation">.</span><span class="token function">isOpened</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parser<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cv<span class="token double-colon punctuation">::</span>Mat frame<span class="token punctuation">;</span>
        cap <span class="token operator">&gt;&gt;</span> frame<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>frame<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">&quot;Video&quot;</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Can&#39;t read frame.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// stop capturing by pressing ESC</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cap<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-9-其他基本对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-其他基本对象类型" aria-hidden="true">#</a> 2.9 其他基本对象类型</h2><p>我们已经了解了 <code>Mat</code> 和 <code>Vec3b</code> 类，还有很多类需要学习，常见的是：</p><ul><li><code>Vec</code></li><li><code>Scalar</code></li><li><code>Point</code></li><li><code>Size</code></li><li><code>Rect</code></li><li><code>RotatedRect</code></li></ul><h3 id="_2-9-1-vec-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-1-vec-对象类型" aria-hidden="true">#</a> 2.9.1 <code>Vec</code> 对象类型</h3><p><code>Vec</code> 是一个数值向量模板，可以定义向量的类型和组件的数量：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Vec<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token operator">&gt;</span> myVector<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里有很多预定义类型：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span>uchar<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> Vec2b<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span>uchar<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> Vec3b<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span>uchar<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> Vec4b<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> Vec2s<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> Vec3s<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> Vec4s<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> Vec2i<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> Vec3i<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> Vec4i<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> Vec2f<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> Vec3f<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> Vec4f<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">&gt;</span> Vec6f<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> Vec2d<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> Vec3d<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> Vec4d<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> Vec<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">&gt;</span> Vec6d<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向量还支持：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>v1 <span class="token operator">=</span> v2 <span class="token operator">+</span> v3<span class="token punctuation">;</span>
v1 <span class="token operator">=</span> v2 <span class="token operator">-</span> v3<span class="token punctuation">;</span>
v1 <span class="token operator">=</span> scale <span class="token operator">*</span> v2<span class="token punctuation">;</span>
v1 <span class="token operator">=</span> <span class="token operator">-</span>v2<span class="token punctuation">;</span>
v1 <span class="token operator">+=</span> v2<span class="token punctuation">;</span>

v1 <span class="token operator">==</span> v2<span class="token punctuation">;</span>
v1 <span class="token operator">!=</span> v2<span class="token punctuation">;</span>
<span class="token function">norm</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>norm(v)</code> 为计算 <strong>欧几里德范数</strong>（Euclidean norm），即</p>`,29),f=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mrow",null,[n("mo",{fence:"true"},"∥"),n("mi",null,"v"),n("mo",{fence:"true"},"∥")]),n("mn",null,"2")]),n("mo",null,"="),n("msqrt",null,[n("mrow",null,[n("munder",null,[n("mo",null,"∑"),n("mrow",null,[n("mi",null,"x"),n("mo",null,"∈"),n("mi",null,"v")])]),n("msup",null,[n("mi",null,"x"),n("mn",null,"2")])])])]),n("annotation",{encoding:"application/x-tex"}," \\left\\Vert v \\right\\Vert _2 = \\sqrt{\\sum_{x \\in v} x^2} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0497em","vertical-align":"-0.2997em"}}),n("span",{class:"minner"},[n("span",{class:"minner"},[n("span",{class:"mopen delimcenter",style:{top:"0em"}},"∥"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mclose delimcenter",style:{top:"0em"}},"∥")]),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.4003em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2997em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"3.04em","vertical-align":"-1.5198em"}}),n("span",{class:"mord sqrt"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.5202em"}},[n("span",{class:"svg-align",style:{top:"-5em"}},[n("span",{class:"pstrut",style:{height:"5em"}}),n("span",{class:"mord",style:{"padding-left":"1em"}},[n("span",{class:"mop op-limits"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.05em"}},[n("span",{style:{top:"-1.9em","margin-left":"0em"}},[n("span",{class:"pstrut",style:{height:"3.05em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"x"),n("span",{class:"mrel mtight"},"∈"),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"v")])])]),n("span",{style:{top:"-3.05em"}},[n("span",{class:"pstrut",style:{height:"3.05em"}}),n("span",null,[n("span",{class:"mop op-symbol large-op"},"∑")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.2774em"}},[n("span")])])])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.7401em"}},[n("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])])]),n("span",{style:{top:"-3.4802em"}},[n("span",{class:"pstrut",style:{height:"5em"}}),n("span",{class:"hide-tail",style:{"min-width":"1.02em",height:"3.08em"}},[n("svg",{xmlns:"http://www.w3.org/2000/svg",width:"400em",height:"3.08em",viewBox:"0 0 400000 3240",preserveAspectRatio:"xMinYMin slice"},[n("path",{d:`M473,2793
c339.3,-1799.3,509.3,-2700,510,-2702 l0 -0
c3.3,-7.3,9.3,-11,18,-11 H400000v40H1017.7
s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200
c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26
s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,
606zM1001 80h400000v40H1017.7z`})])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.5198em"}},[n("span")])])])])])])])])],-1),x=a(`<h3 id="_2-9-2-scalar-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-2-scalar-对象类型" aria-hidden="true">#</a> 2.9.2 <code>Scalar</code> 对象类型</h3><p><code>Scalar</code> 对象类型是从 <code>Vec</code> 派生的模板类，有四个元素。<code>Scalar</code> 类型主要用于传递和读取像素值。</p><p>可以使用 <code>[]</code> 运算符访问和读取下标位置的值，可以使用不同的方式初始化：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Scalar <span class="token function">s0</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Scalar <span class="token function">s1</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Scalar <span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-3-point-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-3-point-对象类型" aria-hidden="true">#</a> 2.9.3 <code>Point</code> 对象类型</h3><h3 id="_2-9-4-size-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-4-size-对象类型" aria-hidden="true">#</a> 2.9.4 <code>Size</code> 对象类型</h3><h3 id="_2-9-5-rect-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-5-rect-对象类型" aria-hidden="true">#</a> 2.9.5 <code>Rect</code> 对象类型</h3><h3 id="_2-9-6-rotatedrect-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-6-rotatedrect-对象类型" aria-hidden="true">#</a> 2.9.6 <code>RotatedRect</code> 对象类型</h3><h2 id="_2-10-基本矩阵运算" tabindex="-1"><a class="header-anchor" href="#_2-10-基本矩阵运算" aria-hidden="true">#</a> 2.10 基本矩阵运算</h2><p>C++ OpenCV 使用 <code>Mat</code> 类操作图像，其结构大致如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">CV_EXPORTS</span> Mat <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 一系列函数</span>
    <span class="token comment">//  ...</span>
    <span class="token comment">/* flag 参数中包含许多关于矩阵的信息，如：
        - Mat 的标识
        - 数据是否连续
        - 深度
        - 通道数目
     */</span>
    <span class="token keyword">int</span> flags<span class="token punctuation">;</span>
    <span class="token comment">// 矩阵的维数，取值应该大于或等于 2</span>
    <span class="token keyword">int</span> dims<span class="token punctuation">;</span>
    <span class="token comment">// 矩阵的行数和列数，如果矩阵超过 2 维，这两个变量的值都为 -1</span>
    <span class="token keyword">int</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">;</span>
    <span class="token comment">// 指向数据的指针</span>
    uchar<span class="token operator">*</span> data<span class="token punctuation">;</span>
    <span class="token comment">// 指向引用计数的指针</span>
    <span class="token comment">// 如果数据是由用户分配的，则为 NULL</span>
    <span class="token keyword">int</span><span class="token operator">*</span> refcount<span class="token punctuation">;</span>
    <span class="token comment">// 其他成员变量和成员函数</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Mat</code> 对象支持所有的矩阵运算，包括（<code>+</code> / <code>-</code>）一个相同大小的矩阵：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Mat a <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>
Mat b <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token double-colon punctuation">::</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>
Mat c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
Mat d <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果加减运算对象是数字，那么将自动进行 <strong>广播</strong> 操作，相当于矩阵的每个元素都和这个数运算。</p><p>乘法有两种，一种是线性代数所定义的乘法，还有一种是元素积（即对应位置的元素相乘，要求操作数大小相同，相当于 MATLAB 中的 <code>.*</code>）。</p><p>OpenCV 支持元素积，需要使用 <code>.mul()</code> 方法，同样也支持乘一个数。</p><p>其他常见操作：</p><ul><li>转置 <code>.t()</code></li><li>求逆 <code>.inv()</code></li></ul><p>还有一些实用的数学函数：</p><ul><li><code>int countNonZero(src)</code> 计算非零元素数量</li><li><code>void meanStdDev(src, mean, srddev)</code> 计算平均值和标准差</li><li><code>void minMaxLoc(src, minVal, maxVal, minLoc, maxLoc)</code> 检测矩阵的最小值和最大值的位置</li></ul><h2 id="_2-11-基本数据存储" tabindex="-1"><a class="header-anchor" href="#_2-11-基本数据存储" aria-hidden="true">#</a> 2.11 基本数据存储</h2><p>OpenCV 支持使用 XML/YAML 来存储和读取数据。</p><h2 id="_2-12-总结" tabindex="-1"><a class="header-anchor" href="#_2-12-总结" aria-hidden="true">#</a> 2.12 总结</h2><p>本章我们学习了 OpenCV 最重要的类型和操作，了解了矩阵的结构和基本运算，并且还有一些其他类、向量等。我们还探讨了保存数据文件的方法。</p>`,24);function C(V,M){const e=p("ExternalLinkIcon");return c(),o("div",null,[u,n("ul",d,[r,n("li",k,[m,n("label",v,[n("a",b,[s("本章代码"),l(e)])])]),h]),g,y,_,w,f,x])}const E=t(i,[["render",C],["__file","index.html.vue"]]);export{E as default};
