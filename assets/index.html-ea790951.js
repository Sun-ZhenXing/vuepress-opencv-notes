import{_ as l,r as p,o as e,c as o,b as s,d as n,a as c,e as D}from"./app-e045e1fd.js";const r={},i=D(`<h1 id="opencv-使用-dnn-部署-yolov7" tabindex="-1"><a class="header-anchor" href="#opencv-使用-dnn-部署-yolov7" aria-hidden="true">#</a> OpenCV 使用 DNN 部署 YOLOv7</h1><p>参考项目<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> argparse</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">YOLOv7</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__init__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">conf_thres</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.7</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">iou_thres</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.conf_threshold = conf_thres</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.iou_threshold = iou_thres</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.class_names = </span><span style="color:#4EC9B0;">list</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">lambda</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: x.strip(), </span><span style="color:#DCDCAA;">open</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;coco.names&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;r&#39;</span><span style="color:#D4D4D4;">).readlines()))</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Initialize model</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.net = cv2.dnn.readNet(path)</span></span>
<span class="line"><span style="color:#D4D4D4;">        input_shape = os.path.splitext(os.path.basename(path))[</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].split(</span><span style="color:#CE9178;">&#39;_&#39;</span><span style="color:#D4D4D4;">)[-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">].split(</span><span style="color:#CE9178;">&#39;x&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.input_height = </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(input_shape[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.input_width = </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(input_shape[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.output_names = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.net.getUnconnectedOutLayersNames()</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.has_postprocess = </span><span style="color:#CE9178;">&#39;score&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.output_names</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">detect</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">image</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        input_img = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.prepare_input(image)</span></span>
<span class="line"><span style="color:#D4D4D4;">        blob = cv2.dnn.blobFromImage(input_img, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> / </span><span style="color:#B5CEA8;">255.0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Perform inference on the image</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.net.setInput(blob)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Runs the forward pass to get output of the output layers</span></span>
<span class="line"><span style="color:#D4D4D4;">        outputs = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.net.forward(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.output_names)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.has_postprocess:</span></span>
<span class="line"><span style="color:#D4D4D4;">            boxes, scores, class_ids = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.parse_processed_output(outputs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;"># Process output data</span></span>
<span class="line"><span style="color:#D4D4D4;">            boxes, scores, class_ids = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.process_output(outputs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> boxes, scores, class_ids</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">prepare_input</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">image</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.img_height, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.img_width = image.shape[:</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        input_img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Resize input image</span></span>
<span class="line"><span style="color:#D4D4D4;">        input_img = cv2.resize(</span></span>
<span class="line"><span style="color:#D4D4D4;">            input_img, (</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.input_width, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.input_height))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Scale input pixel values to 0 to 1</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> input_img</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">process_output</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">output</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        predictions = np.squeeze(output[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Filter out object confidence scores below threshold</span></span>
<span class="line"><span style="color:#D4D4D4;">        obj_conf = predictions[:, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">        predictions = predictions[obj_conf &gt; </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.conf_threshold]</span></span>
<span class="line"><span style="color:#D4D4D4;">        obj_conf = obj_conf[obj_conf &gt; </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.conf_threshold]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Multiply class confidence with bounding box confidence</span></span>
<span class="line"><span style="color:#D4D4D4;">        predictions[:, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">:] *= obj_conf[:, np.newaxis]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Get the scores</span></span>
<span class="line"><span style="color:#D4D4D4;">        scores = np.max(predictions[:, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">:], </span><span style="color:#9CDCFE;">axis</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Filter out the objects with a low score</span></span>
<span class="line"><span style="color:#D4D4D4;">        valid_scores = scores &gt; </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.conf_threshold</span></span>
<span class="line"><span style="color:#D4D4D4;">        predictions = predictions[valid_scores]</span></span>
<span class="line"><span style="color:#D4D4D4;">        scores = scores[valid_scores]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Get the class with the highest confidence</span></span>
<span class="line"><span style="color:#D4D4D4;">        class_ids = np.argmax(predictions[:, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">:], </span><span style="color:#9CDCFE;">axis</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Get bounding boxes for each object</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.extract_boxes(predictions)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Apply non-maxima suppression to suppress weak, overlapping bounding boxes</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># indices = nms(boxes, scores, self.iou_threshold)</span></span>
<span class="line"><span style="color:#D4D4D4;">        indices = cv2.dnn.NMSBoxes(boxes.tolist(), scores.tolist(</span></span>
<span class="line"><span style="color:#D4D4D4;">        ), </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.conf_threshold, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.iou_threshold).flatten()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> boxes[indices], scores[indices], class_ids[indices]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">parse_processed_output</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">outputs</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        scores = np.squeeze(outputs[</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.output_names.index(</span><span style="color:#CE9178;">&#39;score&#39;</span><span style="color:#D4D4D4;">)])</span></span>
<span class="line"><span style="color:#D4D4D4;">        predictions = outputs[</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.output_names.index(</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#CE9178;">&#39;batchno_classid_x1y1x2y2&#39;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Filter out object scores below threshold</span></span>
<span class="line"><span style="color:#D4D4D4;">        valid_scores = scores &gt; </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.conf_threshold</span></span>
<span class="line"><span style="color:#D4D4D4;">        predictions = predictions[valid_scores, :]</span></span>
<span class="line"><span style="color:#D4D4D4;">        scores = scores[valid_scores]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Extract the boxes and class ids</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># </span><span style="color:#569CD6;">TODO</span><span style="color:#6A9955;">: Separate based on batch number</span></span>
<span class="line"><span style="color:#D4D4D4;">        batch_number = predictions[:, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">        class_ids = predictions[:, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes = predictions[:, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># In postprocess, the x,y are the y,x</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes = boxes[:, [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Rescale boxes to original image dimensions</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.rescale_boxes(boxes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> boxes, scores, class_ids</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">extract_boxes</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">predictions</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Extract boxes from predictions</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes = predictions[:, :</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Scale boxes to original image dimensions</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.rescale_boxes(boxes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Convert boxes to xyxy format</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes_ = np.copy(boxes)</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes_[..., </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = boxes[..., </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] - boxes[..., </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">] * </span><span style="color:#B5CEA8;">0.5</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes_[..., </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] = boxes[..., </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] - boxes[..., </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">] * </span><span style="color:#B5CEA8;">0.5</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes_[..., </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">] = boxes[..., </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] + boxes[..., </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">] * </span><span style="color:#B5CEA8;">0.5</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes_[..., </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">] = boxes[..., </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] + boxes[..., </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">] * </span><span style="color:#B5CEA8;">0.5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> boxes_</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">rescale_boxes</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">boxes</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Rescale boxes to original image dimensions</span></span>
<span class="line"><span style="color:#D4D4D4;">        input_shape = np.array(</span></span>
<span class="line"><span style="color:#D4D4D4;">            [</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.input_width, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.input_height, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.input_width, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.input_height])</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes = np.divide(boxes, input_shape, </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=np.float32)</span></span>
<span class="line"><span style="color:#D4D4D4;">        boxes *= np.array([</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.img_width, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.img_height,</span></span>
<span class="line"><span style="color:#D4D4D4;">                           </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.img_width, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.img_height])</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> boxes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">draw_detections</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">image</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">boxes</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">scores</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">class_ids</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> box, score, class_id </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">zip</span><span style="color:#D4D4D4;">(boxes, scores, class_ids):</span></span>
<span class="line"><span style="color:#D4D4D4;">            x1, y1, x2, y2 = box.astype(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;"># Draw rectangle</span></span>
<span class="line"><span style="color:#D4D4D4;">            cv2.rectangle(image, (x1, y1), (x2, y2), (</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">), </span><span style="color:#9CDCFE;">thickness</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            label = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.class_names[class_id]</span></span>
<span class="line"><span style="color:#D4D4D4;">            label = </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">label</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> </span><span style="color:#569CD6;">{</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(score * </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">%&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            labelSize, baseLine = cv2.getTextSize(</span></span>
<span class="line"><span style="color:#D4D4D4;">                label, cv2.FONT_HERSHEY_SIMPLEX, </span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;"># top = max(y1, labelSize[1])</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;"># cv.rectangle(frame, (left, top - round(1.5 * labelSize[1])), (left + round(1.5 * labelSize[0]), top + baseLine), (255,255,255), cv.FILLED)</span></span>
<span class="line"><span style="color:#D4D4D4;">            cv2.putText(image, label, (x1, y1 - </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">                        cv2.FONT_HERSHEY_SIMPLEX, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, (</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">), </span><span style="color:#9CDCFE;">thickness</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> image</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">__name__</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&#39;__main__&#39;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    parser = argparse.ArgumentParser()</span></span>
<span class="line"><span style="color:#D4D4D4;">    parser.add_argument(</span><span style="color:#CE9178;">&#39;--imgpath&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;images/person.jpg&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">help</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;image path&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    parser.add_argument(</span><span style="color:#CE9178;">&#39;--modelpath&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;models/yolov7_640x640.onnx&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#9CDCFE;">choices</span><span style="color:#D4D4D4;">=[</span><span style="color:#CE9178;">&quot;models/yolov7_640x640.onnx&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;models/yolov7-tiny_640x640.onnx&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                 </span><span style="color:#CE9178;">&quot;models/yolov7_736x1280.onnx&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;models/yolov7-tiny_384x640.onnx&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                 </span><span style="color:#CE9178;">&quot;models/yolov7_480x640.onnx&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;models/yolov7_384x640.onnx&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                 </span><span style="color:#CE9178;">&quot;models/yolov7-tiny_256x480.onnx&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;models/yolov7-tiny_256x320.onnx&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                 </span><span style="color:#CE9178;">&quot;models/yolov7_256x320.onnx&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;models/yolov7-tiny_256x640.onnx&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                 </span><span style="color:#CE9178;">&quot;models/yolov7_256x640.onnx&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;models/yolov7-tiny_480x640.onnx&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                                 </span><span style="color:#CE9178;">&quot;models/yolov7-tiny_736x1280.onnx&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;models/yolov7_256x480.onnx&quot;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#9CDCFE;">help</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;onnx filepath&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    parser.add_argument(</span><span style="color:#CE9178;">&#39;--confThreshold&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.3</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">float</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">help</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;class confidence&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    parser.add_argument(</span><span style="color:#CE9178;">&#39;--nmsThreshold&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.5</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">float</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">help</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;nms iou thresh&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    args = parser.parse_args()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;"># Initialize YOLOv7 object detector</span></span>
<span class="line"><span style="color:#D4D4D4;">    yolov7_detector = YOLOv7(</span></span>
<span class="line"><span style="color:#D4D4D4;">        args.modelpath, </span><span style="color:#9CDCFE;">conf_thres</span><span style="color:#D4D4D4;">=args.confThreshold, </span><span style="color:#9CDCFE;">iou_thres</span><span style="color:#D4D4D4;">=args.nmsThreshold)</span></span>
<span class="line"><span style="color:#D4D4D4;">    srcimg = cv2.imread(args.imgpath)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;"># Detect Objects</span></span>
<span class="line"><span style="color:#D4D4D4;">    boxes, scores, class_ids = yolov7_detector.detect(srcimg)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;"># Draw detections</span></span>
<span class="line"><span style="color:#D4D4D4;">    dstimg = yolov7_detector.draw_detections(srcimg, boxes, scores, class_ids)</span></span>
<span class="line"><span style="color:#D4D4D4;">    winName = </span><span style="color:#CE9178;">&#39;Deep learning object detection in OpenCV&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">    cv2.namedWindow(winName, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    cv2.imshow(winName, dstimg)</span></span>
<span class="line"><span style="color:#D4D4D4;">    cv2.waitKey(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    cv2.destroyAllWindows()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep">`,4),t={class:"footnotes"},y={class:"footnotes-list"},d={id:"footnote1",class:"footnote-item"},v={href:"https://github.com/hpc203/yolov7-opencv-onnxrun-cpp-py",target:"_blank",rel:"noopener noreferrer"},u=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function C(m,b){const a=p("ExternalLinkIcon");return e(),o("div",null,[i,s("section",t,[s("ol",y,[s("li",d,[s("p",null,[s("a",v,[n("https://github.com/hpc203/yolov7-opencv-onnxrun-cpp-py"),c(a)]),n(),u])])])])])}const E=l(r,[["render",C],["__file","index.html.vue"]]);export{E as default};
