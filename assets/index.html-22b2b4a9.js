import{_ as t,r as o,o as i,c as r,b as s,d as n,a as l,w as c,e as a}from"./app-e045e1fd.js";const D={},d=a('<h1 id="_2-opencv-基础知识导论" tabindex="-1"><a class="header-anchor" href="#_2-opencv-基础知识导论" aria-hidden="true">#</a> 2. OpenCV 基础知识导论</h1><p>本章介绍以下主题：</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 使用 CMake 配置项目</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 读取 / 写入图像</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 读取视频和访问相机</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 主要的图像结构</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 其他重要的结构</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 基本矩阵运算简介</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 使用 XML / YAML 存储 OpenCV API 进行文件存储操作</label></li></ul><h2 id="_2-1-技术要求" tabindex="-1"><a class="header-anchor" href="#_2-1-技术要求" aria-hidden="true">#</a> 2.1 技术要求</h2>',4),y={class:"task-list-container"},C=s("li",{class:"task-list-item"},[s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-7",checked:"checked",disabled:"disabled"}),s("label",{class:"task-list-item-label",for:"task-item-7"}," 熟悉 C++ 语言")],-1),v={class:"task-list-item"},m=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-8",checked:"checked",disabled:"disabled"},null,-1),u={class:"task-list-item-label",for:"task-item-8"},b={href:"https://github.com/PacktPublishing/Learn-OpenCV-4-By-Building-Projects-Second-Edition/tree/master/Chapter_02",target:"_blank",rel:"noopener noreferrer"},h=s("li",{class:"task-list-item"},[s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-9",checked:"checked",disabled:"disabled"}),s("label",{class:"task-list-item-label",for:"task-item-9"}," 现代操作系统，例如 Ubuntu 20+ 或者 Windows 10+")],-1),E=a(`<h2 id="_2-2-基本-cmake-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-2-基本-cmake-配置文件" aria-hidden="true">#</a> 2.2 基本 CMake 配置文件</h2><p>CMake 可以使用 <code>CMakeLists.txt</code> 配置编译过程，其文件内容类似于：</p><div class="language-cmake" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 指定 CMake 最小版本</span></span>
<span class="line"><span style="color:#569CD6;">cmake_minimum_required</span><span style="color:#D4D4D4;">(VERSION 3.10)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 项目名，此名称保存在 PROJECT_NAME</span></span>
<span class="line"><span style="color:#569CD6;">project</span><span style="color:#D4D4D4;">(cmake-</span><span style="color:#569CD6;">test</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 添加编译目标：编译 main.cpp 为可执行文件</span></span>
<span class="line"><span style="color:#569CD6;">add_executable</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${PROJECT_NAME}</span><span style="color:#D4D4D4;"> main.cpp)</span></span>
<span class="line"></span></code></pre></div><p><code>project(cmake-test)</code> 后，这个名称可以通过 <code>PROJECT_NAME</code> 来访问。<code>\${}</code> 表达式能够访问上下文环境中定义的变量，上面的例子即使用项目名作为可执行文件名称。</p><h2 id="_2-3-创建一个库" tabindex="-1"><a class="header-anchor" href="#_2-3-创建一个库" aria-hidden="true">#</a> 2.3 创建一个库</h2><div class="language-cmake" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 创建动态链接库</span></span>
<span class="line"><span style="color:#569CD6;">add_library</span><span style="color:#D4D4D4;">(Hello hello.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 创建可执行文件</span></span>
<span class="line"><span style="color:#569CD6;">add_executable</span><span style="color:#D4D4D4;">(main main.cpp)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 将目标链接到指定库</span></span>
<span class="line"><span style="color:#569CD6;">target_link_libraries</span><span style="color:#D4D4D4;">(main Hello)</span></span>
<span class="line"></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">链接行为</p><p>链接库的时候指定 <code>SHARED</code> 或者 <code>STATIC</code> 能指定生成的库是静态库（<code>.a</code> / <code>.lib</code>）还是共享库（<code>.so</code> / <code>.dll</code>）。</p><p>CMake 的链接是静态优先的，但查找库的时候默认查找 <code>.so</code> 文件，可以配合几个参数来个性化 CMake 设置：</p><ul><li><code>set(CMAKE_FIND_LIBRARY_SUFFIXES .a)</code> 设置查找库名后缀</li><li><code>find_library()</code> 查找指定库</li></ul><p>创建库的时候也可以指定可见属性：</p><ul><li>如果源文件（<code>.cpp</code> / <code>.cc</code>）中包含第三方头文件，但是头文件（例如 <code>.hpp</code>）中不包含该第三方文件头，采用 <code>PRIVATE</code></li><li>如果源文件和头文件中都包含该第三方文件头，采用 <code>PUBLIC</code></li><li>如果头文件中包含该第三方文件头，但是源文件中不包含，采用 <code>INTERFACE</code></li></ul></div><h2 id="_2-4-管理依赖项" tabindex="-1"><a class="header-anchor" href="#_2-4-管理依赖项" aria-hidden="true">#</a> 2.4 管理依赖项</h2><p>CMake 具有搜索依赖项和外部库的能力，这使得我们能够根据项目中的复杂组件构建复杂的项目。</p><p>我们下面将 OpenCV 添加到项目中：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">cmake_minimum_required</span><span style="color:#D4D4D4;">(VERSION 3.10)</span></span>
<span class="line"><span style="color:#569CD6;">project</span><span style="color:#D4D4D4;">(chapter2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">find_package</span><span style="color:#D4D4D4;">(OpenCV REQUIRED)</span></span>
<span class="line"><span style="color:#569CD6;">message</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;OpenCV version: \${OpenCV_VERSION}&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">include_directories</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${OpenCV_INCLUDE_DIRS}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">link_directories</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${OpenCV_LIBRARY_DIRS}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">(SRC main.cpp)</span></span>
<span class="line"><span style="color:#569CD6;">add_executable</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${PROJECT_NAME}</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">\${SRC}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">target_link_libraries</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${PROJECT_NAME}</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">\${OpenCV_LIBS}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <code>cmake_policy()</code> 来设置当前的策略，来避免 CMake 版本过高或者过低的问题，语法：</p><div class="language-cmake" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">cmake_policy</span><span style="color:#D4D4D4;">(VERSION &lt;min&gt;[...&lt;max&gt;])</span></span>
<span class="line"><span style="color:#6A9955;"># 或者</span></span>
<span class="line"><span style="color:#569CD6;">cmake_policy</span><span style="color:#D4D4D4;">(SET CMP[NNNN] &lt;variable&gt;)</span></span>
<span class="line"></span></code></pre></div><p>例如：</p><div class="language-cmake" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">cmake_policy</span><span style="color:#D4D4D4;">(SET CMP0012 NEW)</span></span>
<span class="line"></span></code></pre></div><p><code>CMP0012</code> 规则为 <code>if()</code> 能够识别数字和布尔常量。</p><p>如果我们只需要 OpenCV 的某一个子模块，也可以使用：</p><div class="language-cmake" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">find_package</span><span style="color:#D4D4D4;">(OpenCV REQUIRED core)</span></span>
<span class="line"></span></code></pre></div><p>这样我们只会引入 OpenCV 的 <code>core</code> 模块。</p><p>我们还可以在一个变量里面添加更多的值，例如：</p><div class="language-cmake" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">(SRC main.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">        utils.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">        color.cpp)</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-5-让脚本更复杂" tabindex="-1"><a class="header-anchor" href="#_2-5-让脚本更复杂" aria-hidden="true">#</a> 2.5 让脚本更复杂</h2><p>下面我们创建一个更复杂的例子，包括子文件夹，库和可执行文件。使用一个 <code>CMakeLists.txt</code> 就可以构建，更常见的方式是为子项目使用不同的 <code>CMakeLists.txt</code>，可以使其更加灵活便捷。</p><p>下面是目录结构：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">CMakeLists.txt</span></span>
<span class="line"><span style="color:#D4D4D4;">main.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">utils/</span></span>
<span class="line"><span style="color:#D4D4D4;">    CMakeLists.txt</span></span>
<span class="line"><span style="color:#D4D4D4;">    computeTime.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">    computeTime.h</span></span>
<span class="line"><span style="color:#D4D4D4;">    logger.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">    logger.h</span></span>
<span class="line"><span style="color:#D4D4D4;">    plotting.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">    plotting.h</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目根目录的 <code>CMakeLists.txt</code> 的内容是：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">cmake_minimum_required</span><span style="color:#D4D4D4;">(VERSION 3.10)</span></span>
<span class="line"><span style="color:#569CD6;">project</span><span style="color:#D4D4D4;">(chapter2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">find_package</span><span style="color:#D4D4D4;">(OpenCV REQUIRED)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">include_directories</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${OpenCV_INCLUDE_DIRS}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">link_directories</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${OpenCV_LIBRARY_DIRS}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">add_subdirectory</span><span style="color:#D4D4D4;">(utils)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">option</span><span style="color:#D4D4D4;">(WITH_LOG </span><span style="color:#CE9178;">&quot;Build with output logs and images int tmp&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">OFF</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">if</span><span style="color:#D4D4D4;">(WITH_LOG)</span></span>
<span class="line"><span style="color:#569CD6;">    add_definitions</span><span style="color:#D4D4D4;">(-DLOG)</span></span>
<span class="line"><span style="color:#569CD6;">endif</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">add_executable</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${PROJECT_NAME}</span><span style="color:#D4D4D4;"> main.cpp)</span></span>
<span class="line"><span style="color:#569CD6;">target_link_libraries</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${PROJECT_NAME}</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">\${OpenCV_LIBS}</span><span style="color:#D4D4D4;"> Utils)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>add_subdirectory()</code> 告诉 CMake 分析所需子文件夹的 <code>CMakeLists.txt</code>。</p><p>下面是 <code>utils/</code> 文件夹下面的 <code>CMakeLists.txt</code>：</p><div class="language-cmake" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">(UTILS_LIB_SRC</span></span>
<span class="line"><span style="color:#D4D4D4;">    computeTime.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">    logger.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">    plotting.cpp</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">add_library</span><span style="color:#D4D4D4;">(Utils </span><span style="color:#569CD6;">\${UTILS_LIB_SRC}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">target_include_directories</span><span style="color:#D4D4D4;">(Utils PUBLIC </span><span style="color:#569CD6;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p><code>option()</code> 可用于创建变量，并包含描述。变量被定义后，可以通过预编译指令来使用：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">#ifdef</span><span style="color:#569CD6;"> LOG</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">logi</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Number of iteration </span><span style="color:#9CDCFE;">%d</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">, i);</span></span>
<span class="line"><span style="color:#C586C0;">#endif</span></span>
<span class="line"></span></code></pre></div><p>现在我们已经基本入门了 CMake 了，可以在不同的操作系统中构建我们的项目。</p><h2 id="_2-6-图像与矩阵" tabindex="-1"><a class="header-anchor" href="#_2-6-图像与矩阵" aria-hidden="true">#</a> 2.6 图像与矩阵</h2><p>任何图像都可以表示为包含一系列数字的矩阵，一般这些数字用于表示光的波长或波长范围的光强度的测量结果。图像中的每个点被称为像素，每个像素可以存储一个或多个值。</p><p>这些储存值的不同决定了图像的不同类别</p><ul><li>只有一个比特的二进制图像</li><li>灰度图</li><li>三通道彩色图像</li></ul>`,37),g=s("p",null,[n("一般使用一个字节来保存（例如 RGB888），其范围是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mo",null,"−"),s("mn",null,"255")]),s("annotation",{encoding:"application/x-tex"},"0-255")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"255")])])]),n("，也有例外，例如 HDR 或热成像通常使用浮点数。")],-1),k=s("p",null,[n("OpenCV 使用 "),s("code",null,"Mat"),n(" 类来储存图像，灰度图为一个矩阵。而 RGB 彩色图像使用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"w"),s("mo",null,"×"),s("mi",null,"h"),s("mo",null,"×"),s("mi",null,"c")]),s("annotation",{encoding:"application/x-tex"},"w \\times h \\times c")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"c")])])]),n(" 的矩阵来表示（分别是宽度、高度和通道数）。")],-1),A=a(`<p>OpenCV 的图像保存格式为 <strong>行 -&gt; 列 -&gt; BGR</strong>，读取一个像素的指针：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">val = row_i * num_cols * channels + col_i * channels;</span></span>
<span class="line"></span></code></pre></div><div class="hint-container info"><p class="hint-container-title">使用指针访问</p><p>OpenCV 函数非常适合用于随机访问，但是有时直接访问内存更有效（使用指针运算），例如当我们必须在循环中访问所有像素的时候。</p></div><h2 id="_2-7-读-写图像" tabindex="-1"><a class="header-anchor" href="#_2-7-读-写图像" aria-hidden="true">#</a> 2.7 读 / 写图像</h2><p>我们直接看代码：</p><div class="hint-container warning"><p class="hint-container-title">代码风格</p><p>本文的代码风格和书本略有不同，如果不说明，本文都不使用 <code>using namespace</code> 来引入命名空间，这样做是为了防止潜在的命名冲突。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;sstream&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;string&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/core.hpp&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/highgui.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argc</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">char*</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">[]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat color = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imread</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;lena.jpg&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat gray = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imread</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;lena.jpg&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::IMREAD_GRAYSCALE);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 如果图片为空</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">() || </span><span style="color:#9CDCFE;">gray</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::cout &lt;&lt; </span><span style="color:#CE9178;">&quot;Could not open or find the image&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 写入文件</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imwrite</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;lena_gray.png&quot;</span><span style="color:#D4D4D4;">, gray);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> myRow = </span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">cols</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> myCol = </span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">rows</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 读取指定位置像素值</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Vec3b myPixel = </span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">at</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Vec3b&gt;(myRow, myCol);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::cout &lt;&lt; </span><span style="color:#CE9178;">&quot;Pixel at (&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; myRow &lt;&lt; </span><span style="color:#CE9178;">&quot;, &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; myCol &lt;&lt; </span><span style="color:#CE9178;">&quot;): (&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">              &lt;&lt; (</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">)</span><span style="color:#9CDCFE;">myPixel</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] &lt;&lt; </span><span style="color:#CE9178;">&quot;, &quot;</span><span style="color:#D4D4D4;"> &lt;&lt; (</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">)</span><span style="color:#9CDCFE;">myPixel</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] &lt;&lt; </span><span style="color:#CE9178;">&quot;, &quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">              &lt;&lt; (</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">)</span><span style="color:#9CDCFE;">myPixel</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">] &lt;&lt; </span><span style="color:#CE9178;">&quot;)&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 显示图片</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imshow</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Color&quot;</span><span style="color:#D4D4D4;">, color);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imshow</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Gray&quot;</span><span style="color:#D4D4D4;">, gray);</span></span>
<span class="line"><span style="color:#6A9955;">    // 持续等待直到任意按键被按下</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">waitKey</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;opencv2/core.hpp&gt;</code> 包含了基本的图像数据处理功能，包括基本的类（例如矩阵）。</p><p><code>&lt;opencv2/highgui.hpp&gt;</code> 包含了读写函数和 GUI 相关功能。</p><p><code>imread()</code> 函数是读取图像的主函数。打开一个图像，并使用矩阵储存它。它接收两个参数，第一个参数是图像路径的字符串。第二个参数是可选的，常用选项为：</p><table><thead><tr><th>名称</th><th>实际值</th><th>功能</th></tr></thead><tbody><tr><td><code>cv::IMREAD_UNCHANGED</code></td><td><code>enum -1</code></td><td>如果有深度则保留深度</td></tr><tr><td><code>cv::IMREAD_COLOR</code></td><td><code>enum 1</code>（默认）</td><td>转换为三通道图像</td></tr><tr><td><code>cv::IMREAD_GRAYSCALE</code></td><td><code>enum 0</code></td><td>转换为灰度图</td></tr></tbody></table><p>我们创建以下示例 <code>CMakeLists.txt</code>，并编译代码：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">cmake_minimum_required</span><span style="color:#D4D4D4;">(VERSION 3.10)</span></span>
<span class="line"><span style="color:#569CD6;">project</span><span style="color:#D4D4D4;">(chapter2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">find_package</span><span style="color:#D4D4D4;">(OpenCV REQUIRED)</span></span>
<span class="line"><span style="color:#569CD6;">message</span><span style="color:#D4D4D4;">(STATUS </span><span style="color:#CE9178;">&quot;OpenCV version: \${OpenCV_VERSION}&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">include_directories</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${OpenCV_INCLUDE_DIRS}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">link_directories</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${OpenCV_LIB_DIR}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">add_executable</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${PROJECT_NAME}</span><span style="color:#D4D4D4;"> main.cpp)</span></span>
<span class="line"><span style="color:#569CD6;">target_link_libraries</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">\${PROJECT_NAME}</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">\${OpenCV_LIBS}</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Linux 下编译：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">mkdir</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-p</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">build</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">build</span></span>
<span class="line"><span style="color:#DCDCAA;">cmake</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">..</span></span>
<span class="line"><span style="color:#DCDCAA;">make</span></span>
<span class="line"></span></code></pre></div>`,15),_={class:"hint-container tip"},x=s("p",{class:"hint-container-title"},"构建指南",-1),B=a(`<h2 id="_2-8-读取视频和摄像头" tabindex="-1"><a class="header-anchor" href="#_2-8-读取视频和摄像头" aria-hidden="true">#</a> 2.8 读取视频和摄像头</h2><p>首先，我们介绍一个十分有用的类 <code>CommandLineParser</code>，它用于解析命令行的参数，在 OpenCV 3.0 中被引入。</p><p>允许的参数以字符串的形式给出，可以分割为多行，其中每一行都是如下格式：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">&quot;{name | default_value | description}&quot;</span></span>
<span class="line"></span></code></pre></div><p>使用类似 <code>@name</code> 格式定义的参数将会作为默认输入。下面是一些解析器的实用方法：</p><ul><li><code>parser.about(msg)</code>：程序的关于信息</li><li><code>parser.has(name)</code>：是否存在指定参数</li><li><code>parser.get&lt;cls&gt;(index)</code>：获取指定位置的参数</li><li><code>parser.printMessage()</code>：打印信息</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;string&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/core.hpp&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/highgui.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">char</span><span style="color:#D4D4D4;">* keys = {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{help h usage ? | | print this message}&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;{@video | | Video file, if not defined try to use webcamera}&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argc</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">char*</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">[]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::CommandLineParser </span><span style="color:#DCDCAA;">parser</span><span style="color:#D4D4D4;">(argc, argv, keys);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">about</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;This program shows how to read video from a file or camera.&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">has</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;help&quot;</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printMessage</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::string arg = </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">get</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::string&gt;(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::VideoCapture </span><span style="color:#DCDCAA;">cap</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::CAP_MSMF);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">cap</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">open</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">cap</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">open</span><span style="color:#D4D4D4;">(arg);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">cap</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isOpened</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">parser</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printMessage</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat frame;</span></span>
<span class="line"><span style="color:#D4D4D4;">        cap &gt;&gt; frame;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">frame</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imshow</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Video&quot;</span><span style="color:#D4D4D4;">, frame);</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::cout &lt;&lt; </span><span style="color:#CE9178;">&quot;Can&#39;t read frame.&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">waitKey</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) == </span><span style="color:#B5CEA8;">27</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span><span style="color:#6A9955;">  // stop capturing by pressing ESC</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">cap</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">release</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),f={class:"hint-container warning"},V=s("p",{class:"hint-container-title"},"Windows 潜在错误",-1),M=a(`<h2 id="_2-9-其他基本对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-其他基本对象类型" aria-hidden="true">#</a> 2.9 其他基本对象类型</h2><p>我们已经了解了 <code>Mat</code> 和 <code>Vec3b</code> 类，还有很多类需要学习，常见的是：</p><ul><li><code>Vec</code></li><li><code>Scalar</code></li><li><code>Point</code></li><li><code>Size</code></li><li><code>Rect</code></li><li><code>RotatedRect</code></li></ul><h3 id="_2-9-1-vec-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-1-vec-对象类型" aria-hidden="true">#</a> 2.9.1 <code>Vec</code> 对象类型</h3><p><code>Vec</code> 是一个数值向量模板，可以定义向量的类型和组件的数量：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">Vec&lt;</span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">19</span><span style="color:#D4D4D4;">&gt; myVector;</span></span>
<span class="line"></span></code></pre></div><p>这里有很多预定义类型：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;uchar, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">&gt; Vec2b;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;uchar, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">&gt; Vec3b;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;uchar, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">&gt; Vec4b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">short</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">&gt; Vec2s;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">short</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">&gt; Vec3s;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">short</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">&gt; Vec4s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">&gt; Vec2i;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">&gt; Vec3i;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">&gt; Vec4i;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">&gt; Vec2f;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">&gt; Vec3f;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">&gt; Vec4f;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">&gt; Vec6f;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">&gt; Vec2d;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">&gt; Vec3d;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">&gt; Vec4d;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Vec&lt;</span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">&gt; Vec6d;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向量还支持：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">v1 = v2 + v3;</span></span>
<span class="line"><span style="color:#D4D4D4;">v1 = v2 - v3;</span></span>
<span class="line"><span style="color:#D4D4D4;">v1 = scale * v2;</span></span>
<span class="line"><span style="color:#D4D4D4;">v1 = -v2;</span></span>
<span class="line"><span style="color:#D4D4D4;">v1 += v2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">v1 == v2;</span></span>
<span class="line"><span style="color:#D4D4D4;">v1 != v2;</span></span>
<span class="line"><span style="color:#DCDCAA;">norm</span><span style="color:#D4D4D4;">(v1);</span></span>
<span class="line"></span></code></pre></div><p><code>norm(v)</code> 为计算 <strong>欧几里德范数</strong>（Euclidean norm），即</p>`,11),R=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mrow",null,[s("mo",{fence:"true"},"∥"),s("mi",null,"v"),s("mo",{fence:"true"},"∥")]),s("mn",null,"2")]),s("mo",null,"="),s("msqrt",null,[s("mrow",null,[s("munder",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"x"),s("mo",null,"∈"),s("mi",null,"v")])]),s("msup",null,[s("mi",null,"x"),s("mn",null,"2")])])])]),s("annotation",{encoding:"application/x-tex"}," \\left\\Vert v \\right\\Vert _2 = \\sqrt{\\sum_{x \\in v} x^2} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0497em","vertical-align":"-0.2997em"}}),s("span",{class:"minner"},[s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},"∥"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mclose delimcenter",style:{top:"0em"}},"∥")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.4003em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.04em","vertical-align":"-1.5198em"}}),s("span",{class:"mord sqrt"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.5202em"}},[s("span",{class:"svg-align",style:{top:"-5em"}},[s("span",{class:"pstrut",style:{height:"5em"}}),s("span",{class:"mord",style:{"padding-left":"1em"}},[s("span",{class:"mop op-limits"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.05em"}},[s("span",{style:{top:"-1.9em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"x"),s("span",{class:"mrel mtight"},"∈"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"v")])])]),s("span",{style:{top:"-3.05em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",null,[s("span",{class:"mop op-symbol large-op"},"∑")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.2774em"}},[s("span")])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7401em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])]),s("span",{style:{top:"-3.4802em"}},[s("span",{class:"pstrut",style:{height:"5em"}}),s("span",{class:"hide-tail",style:{"min-width":"1.02em",height:"3.08em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"400em",height:"3.08em",viewBox:"0 0 400000 3240",preserveAspectRatio:"xMinYMin slice"},[s("path",{d:`M473,2793
c339.3,-1799.3,509.3,-2700,510,-2702 l0 -0
c3.3,-7.3,9.3,-11,18,-11 H400000v40H1017.7
s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9
c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200
c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26
s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,
606zM1001 80h400000v40H1017.7z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.5198em"}},[s("span")])])])])])])])])],-1),q=a(`<h3 id="_2-9-2-scalar-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-2-scalar-对象类型" aria-hidden="true">#</a> 2.9.2 <code>Scalar</code> 对象类型</h3><p><code>Scalar</code> 对象类型是从 <code>Vec</code> 派生的模板类，有四个元素。<code>Scalar</code> 类型主要用于传递和读取像素值。</p><p>可以使用 <code>[]</code> 运算符访问和读取下标位置的值，可以使用不同的方式初始化：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Scalar</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">s0</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Scalar</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">s1</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0.0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1.0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2.0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3.0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Scalar</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">s2</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">s1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-9-3-point-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-3-point-对象类型" aria-hidden="true">#</a> 2.9.3 <code>Point</code> 对象类型</h3><p>另一个非常常见的类模板是 <code>Point</code>，该类定义一个由其坐标 <code>x</code> 和 <code>y</code> 指定的 2D 点。</p><div class="hint-container tip"><p class="hint-container-title">Point3</p><p>和 <code>Point</code> 一样，<code>Point3</code> 模板类用于定义指定的 3D 点。</p></div><p>和 <code>Vec</code> 类一样，OpenCV 为方便定义了以下别名：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Point_&lt;</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">&gt; Point2i;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Point2i Point;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Point_&lt;</span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;">&gt; Point2f;</span></span>
<span class="line"><span style="color:#569CD6;">typedef</span><span style="color:#D4D4D4;"> Point_&lt;</span><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;">&gt; Point2d;</span></span>
<span class="line"></span></code></pre></div><p>OpenCV 为 <code>Point</code> 定义了以下运算符：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">p1 = p2 + p3;</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 = p2 - p3;</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 = a * p2;</span></span>
<span class="line"><span style="color:#D4D4D4;">p2 = p2 / a;</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 += p2;</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 -= p2;</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 *= a;</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 /= a;</span></span>
<span class="line"><span style="color:#569CD6;">double</span><span style="color:#D4D4D4;"> value = </span><span style="color:#DCDCAA;">norm</span><span style="color:#D4D4D4;">(p1);</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 == p2;</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 != p2;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>norm()</code> 仍然为计算欧几里得范数。</p><h3 id="_2-9-4-size-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-4-size-对象类型" aria-hidden="true">#</a> 2.9.4 <code>Size</code> 对象类型</h3><p><code>Size</code> 在 OpenCV 中被广泛使用，用于指定图像或者矩形的大小。这个类有两个重要的成员 <code>width</code> 和 <code>height</code>，以及 <code>area()</code> 方法。</p><p>示例：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Size</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">s</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat img = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Mat</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">zeros</span><span style="color:#D4D4D4;">(s, CV_8UC1);</span></span>
<span class="line"><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">width</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> area = </span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">area</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-9-5-rect-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-5-rect-对象类型" aria-hidden="true">#</a> 2.9.5 <code>Rect</code> 对象类型</h3><p><code>Rect</code> 也是一个非常重要的模板类，用于定义以下参数的 2D 矩形：</p><ul><li>左上角是坐标</li><li>矩形的宽度和高度</li></ul><p><code>Rect</code> 用于定义图像的 <strong>感兴趣区域</strong>（ROI，Region of Interest），例如：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat img = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">imread</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;lena.jpg&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Rect</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">rect_roi</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat img_roi = </span><span style="color:#DCDCAA;">img</span><span style="color:#D4D4D4;">(rect_roi);</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-9-6-rotatedrect-对象类型" tabindex="-1"><a class="header-anchor" href="#_2-9-6-rotatedrect-对象类型" aria-hidden="true">#</a> 2.9.6 <code>RotatedRect</code> 对象类型</h3><p><code>RotatedRect</code> 用于定义一个旋转矩形，参数由中心点、宽度、高度和旋转角度（单位：°）指定。其声明如下：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">RotatedRect</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> Point2f&amp; center, </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> Size2f&amp; size, </span><span style="color:#569CD6;">float</span><span style="color:#D4D4D4;"> angle);</span></span>
<span class="line"></span></code></pre></div><p>这个类的一个有趣的方法是 <code>boundingBox()</code>，该函数返回一个包含旋转矩形的 <code>Rect</code>。</p><h2 id="_2-10-基本矩阵运算" tabindex="-1"><a class="header-anchor" href="#_2-10-基本矩阵运算" aria-hidden="true">#</a> 2.10 基本矩阵运算</h2><p>创建一个 <code>Mat</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat a = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">Mat</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">Size</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">), </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::CV_32F);</span></span>
<span class="line"></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">从缓冲区创建</p><p>使用 <code>Mat(size, type, point_to_buffer)</code> 可以使用来自第三方库的存储缓冲区创建一个新的矩阵，无需复制数据。</p></div><p>常见的通道类型：</p><ul><li><code>CV_8UC1</code></li><li><code>CV_8UC3</code></li><li><code>CV_8UC4</code></li><li><code>CV_32FC1</code></li><li><code>CV_32FC3</code></li><li><code>CV_32FC4</code></li></ul><div class="hint-container tip"><p class="hint-container-title">任何类型的矩阵</p><p>使用 <code>CV_number_typeC(n)</code> 创建任何类型的矩阵，其中 <code>number_type</code> 是 8 位无符号数（<code>8U</code>）到 64 位浮点数（<code>64F</code>），其中 <code>(n)</code> 是通道数，允许的范围是 <code>[1, CV_CN_MAX]</code>。</p></div><p>C++ OpenCV 使用 <code>Mat</code> 类操作图像，其结构大致如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> CV_EXPORTS </span><span style="color:#4EC9B0;">Mat</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">public:</span></span>
<span class="line"><span style="color:#6A9955;">    // 一系列函数</span></span>
<span class="line"><span style="color:#6A9955;">    //  ...</span></span>
<span class="line"><span style="color:#6A9955;">    /* flag 参数中包含许多关于矩阵的信息，如：</span></span>
<span class="line"><span style="color:#6A9955;">        - Mat 的标识</span></span>
<span class="line"><span style="color:#6A9955;">        - 数据是否连续</span></span>
<span class="line"><span style="color:#6A9955;">        - 深度</span></span>
<span class="line"><span style="color:#6A9955;">        - 通道数目</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> flags;</span></span>
<span class="line"><span style="color:#6A9955;">    // 矩阵的维数，取值应该大于或等于 2</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> dims;</span></span>
<span class="line"><span style="color:#6A9955;">    // 矩阵的行数和列数，如果矩阵超过 2 维，这两个变量的值都为 -1</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> rows, cols;</span></span>
<span class="line"><span style="color:#6A9955;">    // 指向数据的指针</span></span>
<span class="line"><span style="color:#D4D4D4;">    uchar* data;</span></span>
<span class="line"><span style="color:#6A9955;">    // 指向引用计数的指针</span></span>
<span class="line"><span style="color:#6A9955;">    // 如果数据是由用户分配的，则为 NULL</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;">* refcount;</span></span>
<span class="line"><span style="color:#6A9955;">    // 其他成员变量和成员函数</span></span>
<span class="line"><span style="color:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Mat</code> 对象支持所有的矩阵运算，包括（<code>+</code> / <code>-</code>）一个相同大小的矩阵：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">Mat a = </span><span style="color:#4EC9B0;">Mat</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">eye</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Size</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">), CV_32F);</span></span>
<span class="line"><span style="color:#D4D4D4;">Mat b = </span><span style="color:#4EC9B0;">Mat</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">ones</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">Size</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">), CV_32F);</span></span>
<span class="line"><span style="color:#D4D4D4;">Mat c = a + b;</span></span>
<span class="line"><span style="color:#D4D4D4;">Mat d = a - b;</span></span>
<span class="line"></span></code></pre></div><p>如果加减运算对象是数字，那么将自动进行 <strong>广播</strong> 操作，相当于矩阵的每个元素都和这个数运算。</p><p>乘法有两种，一种是线性代数所定义的乘法，还有一种是元素积（即对应位置的元素相乘，要求操作数大小相同，相当于 MATLAB 中的 <code>.*</code>）。</p><p>OpenCV 支持元素积，需要使用 <code>.mul()</code> 方法，同样也支持乘一个数。</p><p>其他常见操作：</p><ul><li>转置 <code>.t()</code></li><li>求逆 <code>.inv()</code></li></ul><p>还有一些实用的数学函数：</p><ul><li><code>int countNonZero(src)</code> 计算非零元素数量</li><li><code>void meanStdDev(src, mean, srddev)</code> 计算平均值和标准差</li><li><code>void minMaxLoc(src, minVal, maxVal, minLoc, maxLoc)</code> 检测矩阵的最小值、最大值并且包括最值的位置</li></ul>`,43),F={class:"hint-container tip"},S=s("p",{class:"hint-container-title"},"核心功能",-1),O={href:"https://docs.opencv.org/4.6.0/modules.html",target:"_blank",rel:"noopener noreferrer"},w=a(`<h2 id="_2-11-基本数据存储" tabindex="-1"><a class="header-anchor" href="#_2-11-基本数据存储" aria-hidden="true">#</a> 2.11 基本数据存储</h2><p>OpenCV 支持使用 XML/YAML 来存储和读取数据。</p><h3 id="写入文件" tabindex="-1"><a class="header-anchor" href="#写入文件" aria-hidden="true">#</a> 写入文件</h3><p>要把一些 OpenCV 或其他数值写入文件，可以使用 <code>FileStorage</code> 类，同时要使用流运算符 <code>&lt;&lt;</code> 来操作 STL 流：</p><p>如果需要保存文件，只需要使用 <code>cv::FileStorage</code> 来储存：</p><div class="language-cpp" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">FileStorage</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fs</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;test.yml&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">FileStorage</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">WRITE</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> fps = </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">fs &lt;&lt; </span><span style="color:#CE9178;">&quot;fps&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; fps;</span></span>
<span class="line"></span></code></pre></div><p>使用流输出结果即可。</p><p>下面是示例代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/core.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argc</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">char*</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">[]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::FileStorage </span><span style="color:#DCDCAA;">fs</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;test.yml&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">FileStorage</span><span style="color:#D4D4D4;">::WRITE);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> fps = </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    fs &lt;&lt; </span><span style="color:#CE9178;">&quot;fps&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; fps;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat m1 = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Mat</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">eye</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, CV_32F);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat m2 = </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">Mat</span><span style="color:#D4D4D4;">::</span><span style="color:#DCDCAA;">ones</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, CV_32F);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat result = (m1 + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">mul</span><span style="color:#D4D4D4;">(m1 + </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    fs &lt;&lt; </span><span style="color:#CE9178;">&quot;Result&quot;</span><span style="color:#D4D4D4;"> &lt;&lt; result;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">release</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::FileStorage </span><span style="color:#DCDCAA;">fs2</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;test.yml&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">FileStorage</span><span style="color:#D4D4D4;">::READ);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat r;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">fs2</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;Result&quot;</span><span style="color:#D4D4D4;">] &gt;&gt; r;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::cout &lt;&lt; r &lt;&lt; </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">fs2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">release</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后会创建一个 <code>test.yml</code> 文件，内容为：</p><div class="language-yaml" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">%YAML</span><span style="color:#F44747;">:1.0</span></span>
<span class="line"><span style="color:#D4D4D4;">---</span></span>
<span class="line"><span style="color:#569CD6;">fps</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">5</span></span>
<span class="line"><span style="color:#569CD6;">Result</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">!!opencv-matrix</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">rows</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">2</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">cols</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">3</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">dt</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">f</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">data</span><span style="color:#D4D4D4;">: [ </span><span style="color:#B5CEA8;">8.</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3.</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3.</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3.</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">8.</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3.</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"></span></code></pre></div><h3 id="读取文件" tabindex="-1"><a class="header-anchor" href="#读取文件" aria-hidden="true">#</a> 读取文件</h3><p>使用 <code>cv::FileStorage::READ</code> 来读取 YAML 文件的内容。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;opencv2/core.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argc</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">char*</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">argv</span><span style="color:#D4D4D4;">[]) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::FileStorage </span><span style="color:#DCDCAA;">fs2</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;test.yml&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::</span><span style="color:#4EC9B0;">FileStorage</span><span style="color:#D4D4D4;">::READ);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">cv</span><span style="color:#D4D4D4;">::Mat r;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">fs2</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;Result&quot;</span><span style="color:#D4D4D4;">] &gt;&gt; r;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::cout &lt;&lt; r &lt;&lt; </span><span style="color:#4EC9B0;">std</span><span style="color:#D4D4D4;">::endl;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">fs2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">release</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-12-总结" tabindex="-1"><a class="header-anchor" href="#_2-12-总结" aria-hidden="true">#</a> 2.12 总结</h2><p>本章我们学习了 OpenCV 最重要的类型和操作，了解了矩阵的结构和基本运算，并且还有一些其他类、向量等。我们还探讨了保存数据文件的方法。</p>`,16);function L(I,P){const e=o("ExternalLinkIcon"),p=o("RouterLink");return i(),r("div",null,[d,s("ul",y,[C,s("li",v,[m,s("label",u,[s("a",b,[n("本章代码"),l(e)])])]),h]),E,g,k,A,s("div",_,[x,s("p",null,[n("关于其他系统下的编译，或者需要编写各种系统兼容的程序，可以阅读 "),l(p,{to:"/opencv-development-practice/use-cmake-build-project/"},{default:c(()=>[n("OpenCV 使用 CMake 构建跨平台应用")]),_:1}),n("。")])]),B,s("div",f,[V,s("p",null,[n("Windows 调试摄像头可能出现莫名其妙的错误，查看 "),l(p,{to:"/opencv-development-practice/errors-in-windows/"},{default:c(()=>[n("Windows 错误合集")]),_:1}),n(" 尝试解决。")])]),M,R,q,s("div",F,[S,s("p",null,[n("可以从官方文档查看 "),s("a",O,[n("各种模块"),l(e)]),n(" 的 API，从 Core 模块查看核心功能。")])]),w])}const T=t(D,[["render",L],["__file","index.html.vue"]]);export{T as default};
