import{_ as r,r as o,o as t,c as D,b as s,a,w as p,d as n,e as c}from"./app-e045e1fd.js";const i="/vuepress-opencv-notes/assets/rugby-a70337bd.jpg",y="/vuepress-opencv-notes/assets/basket-5fa6e6da.jpg",d="/vuepress-opencv-notes/assets/res_rugby-3e38cb40.jpg",v="/vuepress-opencv-notes/assets/res_basket-da371cd3.jpg",u={},m=s("h1",{id:"使用-yolov8-进行实例分割",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用-yolov8-进行实例分割","aria-hidden":"true"},"#"),n(" 使用 YOLOv8 进行实例分割")],-1),C={class:"table-of-contents"},b={class:"hint-container info"},_=s("p",{class:"hint-container-title"},"源代码",-1),g={href:"https://pysource.com/2023/02/21/yolo-v8-segmentation",target:"_blank",rel:"noopener noreferrer"},E=c(`<h2 id="_1-安装-yolov8-环境" tabindex="-1"><a class="header-anchor" href="#_1-安装-yolov8-环境" aria-hidden="true">#</a> 1. 安装 YOLOv8 环境</h2><p>确保使用可用的 CUDA 环境以保证速度。</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ultralytics</span></span>
<span class="line"><span style="color:#DCDCAA;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-python</span></span>
<span class="line"></span></code></pre></div><p><code>ultralytics</code> 官方已经封装了各种 YOLOv8 的模型，我们不需要下载就可以使用，</p><h2 id="_2-yolov8-实例分割" tabindex="-1"><a class="header-anchor" href="#_2-yolov8-实例分割" aria-hidden="true">#</a> 2. YOLOv8 实例分割</h2><p>我们先创建 <code>yolo_segmentation.py</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> numpy </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> np</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> ultralytics </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> YOLO</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> ultralytics.yolo.engine.results </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Results</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">YOLOSegmentation</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__init__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">model_path</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.model = YOLO(model_path)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">detect</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">: np.ndarray):</span></span>
<span class="line"><span style="color:#D4D4D4;">        height, width, _ = img.shape</span></span>
<span class="line"><span style="color:#D4D4D4;">        results = </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.model.predict(</span><span style="color:#9CDCFE;">source</span><span style="color:#D4D4D4;">=img.copy(), </span><span style="color:#9CDCFE;">save</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">False</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">save_txt</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">False</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        result: Results = results[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">        segmentation_contours_idx = []</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> seg </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> result.masks.xyn:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;"># contours</span></span>
<span class="line"><span style="color:#D4D4D4;">            seg[:, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] *= width</span></span>
<span class="line"><span style="color:#D4D4D4;">            seg[:, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] *= height</span></span>
<span class="line"><span style="color:#D4D4D4;">            segment = np.array(seg, </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=np.int32)</span></span>
<span class="line"><span style="color:#D4D4D4;">            segmentation_contours_idx.append(segment)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        bboxes = np.array(result.boxes.xyxy.cpu(), </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;int&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Get class ids</span></span>
<span class="line"><span style="color:#D4D4D4;">        class_ids = np.array(result.boxes.cls.cpu(), </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;int&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Get scores</span></span>
<span class="line"><span style="color:#D4D4D4;">        scores = np.array(result.boxes.conf.cpu(), </span><span style="color:#9CDCFE;">dtype</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;float&quot;</span><span style="color:#D4D4D4;">).round(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> bboxes, class_ids, segmentation_contours_idx, scores</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建 <code>main.py</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> yolo_segmentation </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> YOLOSegmentation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">img = cv2.imread(</span><span style="color:#CE9178;">&quot;images/rugby.jpg&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">img = cv2.resize(img, </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fx</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.7</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fy</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.7</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">ys = YOLOSegmentation(</span><span style="color:#CE9178;">&quot;yolov8m-seg.pt&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">bboxes, classes, segmentations, scores = ys.detect(img)</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> bbox, class_id, seg, score </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">zip</span><span style="color:#D4D4D4;">(bboxes, classes, segmentations, scores):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;bbox:&quot;</span><span style="color:#D4D4D4;">, bbox, </span><span style="color:#CE9178;">&quot;class id:&quot;</span><span style="color:#D4D4D4;">, class_id, </span><span style="color:#CE9178;">&quot;seg:&quot;</span><span style="color:#D4D4D4;">, seg, </span><span style="color:#CE9178;">&quot;score:&quot;</span><span style="color:#D4D4D4;">, score)</span></span>
<span class="line"><span style="color:#D4D4D4;">    x1, y1, x2, y2 = bbox</span></span>
<span class="line"><span style="color:#D4D4D4;">    cv2.rectangle(img, (x1, y1), (x2, y2), (</span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">), </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    cv2.polylines(img, [seg], </span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">, (</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">), </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">cv2.imwrite(</span><span style="color:#CE9178;">&quot;res.jpg&quot;</span><span style="color:#D4D4D4;">, img)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面分别是实验用到的 <code>rugby.jpg</code> 和 <code>basket.jpg</code>，</p><p><img src="`+i+'" alt="rugby.jpg" loading="lazy"></p><p><img src="'+y+'" alt="basket.jpg" loading="lazy"></p>',12),h={class:"hint-container info"},A=s("p",{class:"hint-container-title"},"版权图片",-1),x=s("p",null,"如果您需要图片的版权请访问他们的版权商：",-1),f={href:"https://www.pexels.com/it-it/foto/kigoa-football-su-erba-verde-durante-il-giorno-209956/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.pexels.com/it-it/foto/uomo-che-gioca-a-basket-267761/",target:"_blank",rel:"noopener noreferrer"},k=c('<p>生成结果：</p><p><img src="'+d+'" alt="res_rugby" loading="lazy"></p><p><img src="'+v+`" alt="res_basket" loading="lazy"></p><h2 id="_3-视频示例" tabindex="-1"><a class="header-anchor" href="#_3-视频示例" aria-hidden="true">#</a> 3. 视频示例</h2><p>此外，这里还实现了一个视频示例，实时分割手机并标注：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cv2</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> yolo_segmentation </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> YOLOSegmentation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">PHONE_CLASS_ID = </span><span style="color:#B5CEA8;">67</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">ys = YOLOSegmentation(</span><span style="color:#CE9178;">&quot;yolov8m-seg.pt&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">cap = cv2.VideoCapture(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> cap.isOpened():</span></span>
<span class="line"><span style="color:#D4D4D4;">    ret, frame = cap.read()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">not</span><span style="color:#D4D4D4;"> ret:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#D4D4D4;">    bboxes, classes, segmentations, scores = ys.detect(frame)</span></span>
<span class="line"><span style="color:#D4D4D4;">    mask = frame.copy()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> bbox, class_id, seg, score </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">zip</span><span style="color:#D4D4D4;">(bboxes, classes, segmentations, scores):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> class_id != PHONE_CLASS_ID:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">continue</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># print(&quot;bbox:&quot;, bbox, &quot;class id:&quot;, class_id, &quot;seg:&quot;, seg, &quot;score:&quot;, score)</span></span>
<span class="line"><span style="color:#D4D4D4;">        x1, y1, x2, y2 = bbox</span></span>
<span class="line"><span style="color:#D4D4D4;">        cv2.rectangle(mask, (x1, y1), (x2, y2), (</span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">), </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        cv2.polylines(mask, [seg], </span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">, (</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">), </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        cv2.fillPoly(mask, [seg], (</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">        cv2.putText(</span></span>
<span class="line"><span style="color:#D4D4D4;">            mask,</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">score</span><span style="color:#569CD6;">:.2f}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">            (x1, y1 - </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">            cv2.FONT_HERSHEY_SIMPLEX,</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#B5CEA8;">0.9</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">            (</span><span style="color:#B5CEA8;">36</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    frame = cv2.addWeighted(frame, </span><span style="color:#B5CEA8;">0.7</span><span style="color:#D4D4D4;">, mask, </span><span style="color:#B5CEA8;">0.3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    cv2.imshow(</span><span style="color:#CE9178;">&quot;frame&quot;</span><span style="color:#D4D4D4;">, frame)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> cv2.waitKey(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) &amp; </span><span style="color:#569CD6;">0x</span><span style="color:#B5CEA8;">FF</span><span style="color:#D4D4D4;"> == </span><span style="color:#DCDCAA;">ord</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;q&quot;</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">cap.release()</span></span>
<span class="line"><span style="color:#D4D4D4;">cv2.destroyAllWindows()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function q(O,F){const l=o("router-link"),e=o("ExternalLinkIcon");return t(),D("div",null,[m,s("nav",C,[s("ul",null,[s("li",null,[a(l,{to:"#_1-安装-yolov8-环境"},{default:p(()=>[n("1. 安装 YOLOv8 环境")]),_:1})]),s("li",null,[a(l,{to:"#_2-yolov8-实例分割"},{default:p(()=>[n("2. YOLOv8 实例分割")]),_:1})]),s("li",null,[a(l,{to:"#_3-视频示例"},{default:p(()=>[n("3. 视频示例")]),_:1})])])]),s("div",b,[_,s("p",null,[n("本文的源代码参考了 "),s("a",g,[n("Pysource"),a(e)]),n("，如果需要下载请到此博客处下载。")])]),E,s("div",h,[A,x,s("ul",null,[s("li",null,[s("a",f,[n("rugby.jpg"),a(e)])]),s("li",null,[s("a",B,[n("basket.jpg"),a(e)])])])]),k])}const w=r(u,[["render",q],["__file","index.html.vue"]]);export{w as default};
